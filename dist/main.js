!function(Q){var F={};function B(U){if(F[U])return F[U].exports;var n=F[U]={i:U,l:!1,exports:{}};return Q[U].call(n.exports,n,n.exports,B),n.l=!0,n.exports}B.m=Q,B.c=F,B.d=function(Q,F,U){B.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:U})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,F){if(1&F&&(Q=B(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(B.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var n in Q)B.d(U,n,function(F){return Q[F]}.bind(null,n));return U},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="",B(B.s=0)}([function(Q,F,B){Q.exports=B(1)},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/utils.js\n\'mode strict\';\n\n\nvar verbose = false;\n\nfunction logger(str) {\n  if (verbose) console.log(str);\n}\n// CONCATENATED MODULE: ./src/commonClasses.js\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar Point =\n/*#__PURE__*/\nfunction () {\n  function Point(x, y) {\n    _classCallCheck(this, Point);\n\n    this.x = x;\n    this.y = y;\n  }\n\n  _createClass(Point, [{\n    key: "add",\n    value: function add(pt) {\n      this.x += pt.x;\n      this.y += pt.y;\n    }\n  }, {\n    key: "addPair",\n    value: function addPair(x, y) {\n      this.x += x;\n      this.y += y;\n    }\n  }, {\n    key: "subs",\n    value: function subs(pt) {\n      this.x -= pt.x;\n      this.y -= pt.y;\n    }\n  }, {\n    key: "copy",\n    value: function copy(pt) {\n      this.x = pt.x;\n      this.y = pt.y;\n    }\n  }, {\n    key: "copyPair",\n    value: function copyPair(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n  }, {\n    key: "sum",\n    value: function sum(a, b) {\n      this.x = a.x + b.x;\n      this.y = a.y + b.y;\n    }\n  }, {\n    key: "distance",\n    value: function distance(pt) {\n      var dx = this.x - pt.x;\n      var dy = this.y - pt.y;\n      return Math.floor(Math.sqrt(dx * dx + dy * dy));\n    }\n  }]);\n\n  return Point;\n}();\n// CONCATENATED MODULE: ./src/rand.js\n\n\n\n\n\nvar randBufferSize = 100000;\nvar currentRand = 0;\nvar randNum = Array(randBufferSize);\nvar unitJump = 1;\n\nfunction initRandNum() {\n  for (var i = 0; i < randBufferSize; i++) {\n    randNum[i] = Math.random();\n  }\n\n  logger(\'Init rand num is finished!\');\n}\n\nfunction getRandUniformBool() {\n  if (currentRand > randBufferSize - 1) currentRand = -1;\n  currentRand++;\n  return randNum[currentRand];\n}\n\nfunction getRandUniformRadian() {\n  return getRandUniformBool() * Math.PI * 2.0;\n}\n\nfunction getRandUniformCircularPosition(radius, seed) {\n  var randRadian = getRandUniformRadian();\n  return new Point(Math.floor(radius * Math.cos(randRadian)) + seed.x, Math.floor(radius * Math.sin(randRadian)) + seed.y);\n}\n\nfunction getHorizontalRandJump(horizontalDrift) {\n  if (getRandUniformBool() > horizontalDrift) return unitJump;else return -unitJump;\n}\n\nfunction getVerticalRandJump(verticalDrift) {\n  if (getRandUniformBool() > verticalDrift) return unitJump;else return -unitJump;\n}\n\nfunction getRandJump(horizontalDrift, verticalDrift) {\n  var jump = new Point(0, 0);\n\n  if (getRandUniformBool() < 0.5) {\n    jump.x = getHorizontalRandJump(horizontalDrift);\n  } else {\n    jump.y = getVerticalRandJump(verticalDrift);\n  }\n\n  return jump;\n}\n// CONCATENATED MODULE: ./src/fractalDim.js\n\n\nvar mass = new Array(800).fill(0);\n\nvar isR2Calculation = false;\n\nfunction fractalDim2(newParticleDist, maxR) {\n  for (var i = 0; i < newParticleDist.length; i++) {\n    mass[newParticleDist[i]]++;\n  }\n\n  var logSize = [];\n  var logMass = [];\n  var counter = 0;\n  var totalMass = 0;\n\n  for (var _i = 1; _i < maxR; _i++) {\n    if (mass[_i] > 0) {\n      totalMass += mass[_i];\n      logSize[counter] = Math.log(_i);\n      logMass[counter] = Math.log(totalMass);\n      counter++;\n    }\n  }\n\n  var ans = linearRegression(logMass, logSize);\n  document.getElementById("fdim").innerHTML = Math.round(ans.slope * 1000) / 1000;\n}\n\nfunction linearRegression(y, x) {\n  var lr = {};\n  var n = y.length;\n  var sum_x = 0;\n  var sum_y = 0;\n  var sum_xy = 0;\n  var sum_xx = 0;\n  var sum_yy = 0;\n\n  for (var i = 0; i < y.length; i++) {\n    sum_x += x[i];\n    sum_y += y[i];\n    sum_xy += x[i] * y[i];\n    sum_xx += x[i] * x[i];\n    sum_yy += y[i] * y[i];\n  }\n\n  if (isR2Calculation) {\n    lr[\'r2\'] = Math.pow((n * sum_xy - sum_x * sum_y) / Math.sqrt((n * sum_xx - sum_x * sum_x) * (n * sum_yy - sum_y * sum_y)), 2);\n  }\n\n  lr[\'slope\'] = (n * sum_xy - sum_x * sum_y) / (n * sum_xx - sum_x * sum_x);\n  lr[\'intercept\'] = (sum_y - lr.slope * sum_x) / n;\n  return lr;\n}\n// CONCATENATED MODULE: ./src/engine.js\n\n\n\n\n\n\n\nvar seedSize = 2;\nvar insertMargin = 5;\nvar aggregatedCountPerFrame = 50;\nvar domainMargin = 7;\nvar totalAggregatedCount = 0;\nvar currentMaxRadius = 0;\nvar isStop = false;\nvar cdt;\n\nfunction start() {\n  cdt = context.getImageData(0, 0, canvasSize.x, canvasSize.y);\n  isStop = false;\n  draw();\n}\n\nfunction stopAndClearCanvas() {\n  isStop = true;\n  context.clearRect(0, 0, canvas.width, canvas.height);\n  context.fillStyle = \'rgba(255, 0, 0, 255)\';\n  context.arc(main_seed.x, main_seed.y, seedSize, 0, 2 * Math.PI);\n  context.fill();\n  totalAggregatedCount = 0;\n  currentMaxRadius = 0;\n  document.getElementById("pts").innerHTML = totalAggregatedCount;\n  document.getElementById("size").innerHTML = currentMaxRadius;\n  document.getElementById("fdim").innerHTML = "-";\n  cdt = context.getImageData(0, 0, canvasSize.xh, canvasSize.y);\n}\n\nfunction pause() {\n  isStop = true;\n}\n\nfunction draw() {\n  var aggregatedPointRadiuses = [];\n\n  for (var i = 0; i < aggregatedCountPerFrame; i++) {\n    var newPosition = new Point(0, 0);\n    var startPosition = new Point(0, 0);\n    var randCircularPosition = getRandUniformCircularPosition(currentMaxRadius + insertMargin, main_seed);\n    startPosition.copy(randCircularPosition);\n    var isNotAggregated = true;\n\n    while (isNotAggregated) {\n      if (currentMaxRadius > maxAggregateRadius) return;\n      var jump = getRandJump(main_horizontalDrift, main_verticalDrift);\n      newPosition.sum(startPosition, jump);\n\n      if (!isJumpWithinDomain(newPosition, currentMaxRadius + domainMargin, main_seed)) {\n        newPosition.copy(startPosition);\n      } else {\n        if (isAggregate(newPosition, cdt, canvasSize)) {\n          if (isGetAggregated()) {\n            drawPixel(startPosition, 255, 0, 0, 255, cdt, canvasSize);\n            aggregatedPointRadiuses.push(startPosition.distance(main_seed));\n            if (aggregatedPointRadiuses[i] > currentMaxRadius) currentMaxRadius = aggregatedPointRadiuses[i];\n            totalAggregatedCount++;\n            isNotAggregated = false;\n          } else {\n            newPosition.copy(startPosition);\n          }\n        } else {\n          startPosition.copy(newPosition);\n        }\n      }\n    }\n  }\n\n  if (!isStop) {\n    updateCanvas(context, cdt);\n    fractalDim2(aggregatedPointRadiuses, currentMaxRadius);\n    document.getElementById("pts").innerHTML = totalAggregatedCount;\n    document.getElementById("size").innerHTML = currentMaxRadius;\n    window.requestAnimationFrame(draw);\n  }\n}\n\nfunction isJumpWithinDomain(newPosition, maxR, seed) {\n  return newPosition.distance(seed) <= maxR;\n}\n\nfunction isAggregate(position, canvasData, canvasSize) {\n  var index = (position.x + position.y * canvasSize.x) * 4;\n  return canvasData.data[index] === 255;\n}\n\nfunction isGetAggregated() {\n  return getRandUniformBool() < stickProbability;\n}\n\nfunction drawPixel(point, r, g, b, a, canvasData, canvasSize) {\n  var index = (point.x + point.y * canvasSize.x) * 4;\n  canvasData.data[index + 0] = r;\n  canvasData.data[index + 1] = g;\n  canvasData.data[index + 2] = b;\n  canvasData.data[index + 3] = a;\n}\n\nfunction updateCanvas(ctx, canvasData) {\n  ctx.putImageData(canvasData, 0, 0);\n}\n// CONCATENATED MODULE: ./src/main.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "context", function() { return context; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "canvas", function() { return canvas; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "canvasSize", function() { return canvasSize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "seed", function() { return main_seed; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "horizontalDrift", function() { return main_horizontalDrift; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verticalDrift", function() { return main_verticalDrift; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stickProbability", function() { return stickProbability; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maxAggregateRadius", function() { return maxAggregateRadius; });\n\n\nvar defaultDrift = 0.5;\nvar defaultStickProbability = 1;\nvar canvas;\nvar context;\nvar canvasSize = new Point(0, 0);\nvar main_seed = new Point(0, 0);\nvar maxAggregateRadius;\nvar stickProbability = defaultStickProbability;\nvar main_verticalDrift = defaultDrift;\nvar main_horizontalDrift = defaultDrift;\n\n\n\n\n\ndocument.addEventListener("DOMContentLoaded", init);\n\nfunction init() {\n  logger(\'Run now: init\');\n  canvas = document.getElementById("canvas");\n  canvasSize.x = canvas.width;\n  canvasSize.y = canvas.height;\n  main_seed.x = Math.floor(canvasSize.x / 2);\n  main_seed.y = Math.floor(canvasSize.y / 2);\n  context = canvas.getContext("2d");\n  context.fillStyle = \'rgba(255, 0, 0, 255)\';\n  context.clearRect(0, 0, canvasSize.x, canvasSize.y);\n  context.arc(canvasSize.x / 2, canvasSize.y / 2, 3, 0, 2 * Math.PI);\n  context.fill();\n  maxAggregateRadius = Math.floor(Math.sqrt(canvasSize.x * canvasSize.x + canvasSize.y * canvasSize.y));\n  initRandNum();\n  addHandlers();\n}\n\nfunction addHandlers() {\n  document.getElementById("driftVertical").addEventListener("input", setDriftVertical);\n  document.getElementById("driftVertical").addEventListener("dblclick", resetDriftVertical);\n  document.getElementById("driftHorizontal").addEventListener("input", setDriftHorizontal);\n  document.getElementById("driftHorizontal").addEventListener("dblclick", resetDriftHorizontal);\n  document.getElementById("aggregationProbability").addEventListener("input", setAggregationProbability);\n  document.getElementById("btn-start").addEventListener("click", start);\n  document.getElementById("btn-pause").addEventListener("click", pause);\n  document.getElementById("btn-clear").addEventListener("click", stopAndClearCanvas);\n}\n\nfunction setAggregationProbability() {\n  var slider = document.getElementById("aggregationProbability");\n  var output = document.getElementById("aggregationProbabilityValue");\n  output.innerHTML = slider.value;\n  stickProbability = slider.value;\n}\n\nfunction setDriftHorizontal() {\n  var slider = document.getElementById("driftHorizontal");\n  var output = document.getElementById("driftHorizontalValue");\n  output.innerHTML = slider.value;\n  main_horizontalDrift = slider.value;\n}\n\nfunction setDriftVertical() {\n  var slider = document.getElementById("driftVertical");\n  var output = document.getElementById("driftVerticalValue");\n  output.innerHTML = slider.value;\n  main_verticalDrift = slider.value;\n}\n\nfunction resetDriftVertical() {\n  var slider = document.getElementById("driftVertical");\n  var output = document.getElementById("driftVerticalValue");\n  output.innerHTML = defaultDrift;\n  main_verticalDrift = defaultDrift;\n  slider.value = defaultDrift;\n}\n\nfunction resetDriftHorizontal() {\n  var slider = document.getElementById("driftHorizontal");\n  var output = document.getElementById("driftHorizontalValue");\n  output.innerHTML = defaultDrift;\n  main_verticalDrift = defaultDrift;\n  slider.value = defaultDrift;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')}]);