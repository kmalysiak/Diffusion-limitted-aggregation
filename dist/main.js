!function(Q){var F={};function B(U){if(F[U])return F[U].exports;var n=F[U]={i:U,l:!1,exports:{}};return Q[U].call(n.exports,n,n.exports,B),n.l=!0,n.exports}B.m=Q,B.c=F,B.d=function(Q,F,U){B.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:U})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,F){if(1&F&&(Q=B(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(B.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var n in Q)B.d(U,n,function(F){return Q[F]}.bind(null,n));return U},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="",B(B.s=1)}([function(module,exports,__webpack_require__){eval('module.exports = function() {\n  return new Worker(__webpack_require__.p + "7ba221592ccecc46794d.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS5qcz9jZjY1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0Esb0JBQW9CLHFCQUF1QjtBQUMzQyIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBXb3JrZXIoX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjdiYTIyMTU5MmNjZWNjNDY3OTRkLndvcmtlci5qc1wiKTtcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n')},function(Q,F,B){Q.exports=B(2)},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/canvasCommon.js\n\n\nfunction writeStatus(ctx, text) {\n  ctx.clearRect(0, 760, 400, 30);\n  ctx.fillText(text, 10, 780);\n}\n\nfunction resetCanvas(context, canvas, seed, seedSize) {\n  context.clearRect(0, 0, canvas.width, canvas.height);\n  context.fillStyle = \'rgba(255, 0, 0, 255)\';\n  context.arc(seed.x, seed.y, seedSize, 0, 2 * Math.PI);\n  context.fill();\n}\n// EXTERNAL MODULE: ./node_modules/worker-loader/dist/cjs.js!./src/core.js\nvar core = __webpack_require__(0);\nvar core_default = /*#__PURE__*/__webpack_require__.n(core);\n\n// CONCATENATED MODULE: ./src/engine.js\n\n\n\n\n\n\n\nvar seedSize = 2;\nvar isStop = false;\nvar cdt;\nvar coreWorker;\nvar engine_status;\nvar isInit = false;\ncoreWorker = new core_default.a();\n\ncoreWorker.onmessage = function (e) {\n  if (isStop) return;\n  var partList = JSON.parse(e.data.part);\n\n  for (var i = 0; i < partList.length; i++) {\n    drawPixel(partList[i], cdt, canvasSize);\n  }\n\n  updateCanvas(context, cdt); // console.log(e.data.aggregatedParticlesCount);\n\n  document.getElementById("pts").innerHTML = e.data.aggregatedParticlesCount;\n  document.getElementById("size").innerHTML = e.data.currentMaxRadius;\n  if (e.data.fd !== undefined) document.getElementById("fdim").innerHTML = (Math.round(e.data.fd * 1000) / 1000).toString();\n\n  if (!isStop) {\n    if (simulationParameters.isParamsChanged) {\n      coreWorker.postMessage([\'paramsUpdate\', simulationParameters]);\n      simulationParameters.isParamsChanged = false;\n    }\n\n    coreWorker.postMessage(\'continue\');\n  }\n};\n\nfunction start() {\n  if (!isInit) {\n    cdt = context.getImageData(0, 0, canvasSize.x, canvasSize.y);\n    coreWorker.postMessage(\'init\');\n\n    if (simulationParameters.isParamsChanged) {\n      coreWorker.postMessage([\'paramsUpdate\', simulationParameters]);\n      simulationParameters.isParamsChanged = false;\n    }\n\n    isInit = true;\n  }\n\n  isStop = false;\n  coreWorker.postMessage(\'start\');\n  engine_status = "Status: Started. Simulation on the run.";\n}\n\nfunction stopAndClearCanvas() {\n  coreWorker.postMessage(\'stop\');\n  isStop = true;\n  context.clearRect(0, 0, canvas.width, canvas.height);\n  engine_status = "Status: Cleared. Hit start to begin new simulation.";\n  writeStatus(context, engine_status);\n  context.fillStyle = \'rgba(255, 0, 0, 255)\';\n  context.arc(main_seed.x, main_seed.y, seedSize, 0, 2 * Math.PI);\n  context.fill();\n  document.getElementById("pts").innerHTML = \'0\';\n  document.getElementById("size").innerHTML = \'0\';\n  document.getElementById("fdim").innerHTML = "-";\n  cdt = context.getImageData(0, 0, canvasSize.x, canvasSize.y);\n}\n\nfunction pause() {\n  coreWorker.postMessage(\'pause\');\n  isStop = true;\n  engine_status = "Status: Paused. Hit start to continue simulation.";\n  writeStatus(context, engine_status);\n}\n\nfunction drawPixel(point, canvasData, canvasSize) {\n  var index = (point.x + point.y * canvasSize.x) * 4;\n  canvasData.data[index + 0] = 255;\n  canvasData.data[index + 3] = 255;\n}\n\nfunction updateCanvas(ctx, canvasData) {\n  ctx.putImageData(canvasData, 0, 0);\n  writeStatus(ctx, engine_status);\n}\n// CONCATENATED MODULE: ./src/commonClasses.js\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar Point =\n/*#__PURE__*/\nfunction () {\n  function Point(x, y) {\n    _classCallCheck(this, Point);\n\n    this.x = x;\n    this.y = y;\n  }\n\n  _createClass(Point, [{\n    key: "add",\n    value: function add(pt) {\n      this.x += pt.x;\n      this.y += pt.y;\n    }\n  }, {\n    key: "addPair",\n    value: function addPair(x, y) {\n      this.x += x;\n      this.y += y;\n    }\n  }, {\n    key: "subs",\n    value: function subs(pt) {\n      this.x -= pt.x;\n      this.y -= pt.y;\n    }\n  }, {\n    key: "copy",\n    value: function copy(pt) {\n      this.x = pt.x;\n      this.y = pt.y;\n    }\n  }, {\n    key: "copyPair",\n    value: function copyPair(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n  }, {\n    key: "sum",\n    value: function sum(a, b) {\n      this.x = a.x + b.x;\n      this.y = a.y + b.y;\n    }\n  }, {\n    key: "distanceSquare",\n    value: function distanceSquare(pt) {\n      var dx = this.x - pt.x;\n      var dy = this.y - pt.y;\n      return dx * dx + dy * dy;\n    }\n  }, {\n    key: "distance",\n    value: function distance(pt) {\n      return Math.floor(Math.sqrt(this.distanceSquare(pt)));\n    }\n  }]);\n\n  return Point;\n}();\n// CONCATENATED MODULE: ./src/rand.js\n\n\n\n\nvar randBufferSize = 100000;\nvar currentRand = 0;\nvar randNum = Array(randBufferSize);\nvar unitJump = 1;\n\nfunction initRandNum() {\n  for (var i = 0; i < randBufferSize; i++) {\n    randNum[i] = Math.random();\n  }\n}\n\nfunction getRandUniformBool() {\n  if (currentRand > randBufferSize - 1) currentRand = -1;\n  currentRand++;\n  return randNum[currentRand];\n}\n\nfunction getRandUniformRadian() {\n  return getRandUniformBool() * Math.PI * 2.0;\n}\n\nfunction getRandUniformCircularPosition(radius, seed) {\n  var randRadian = getRandUniformRadian();\n  return new Point(Math.floor(radius * Math.cos(randRadian)) + seed.x, Math.floor(radius * Math.sin(randRadian)) + seed.y);\n}\n\nfunction getHorizontalRandJump(horizontalDrift) {\n  if (getRandUniformBool() > horizontalDrift) return unitJump;else return -unitJump;\n}\n\nfunction getVerticalRandJump(verticalDrift) {\n  if (getRandUniformBool() > verticalDrift) return unitJump;else return -unitJump;\n}\n\nfunction getRandJump(horizontalDrift, verticalDrift) {\n  var jump = new Point(0, 0);\n\n  if (getRandUniformBool() < 0.5) {\n    jump.x = getHorizontalRandJump(horizontalDrift);\n  } else {\n    jump.y = getVerticalRandJump(verticalDrift);\n  }\n\n  return jump;\n}\n// CONCATENATED MODULE: ./src/main.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "context", function() { return context; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "canvas", function() { return canvas; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "canvasSize", function() { return canvasSize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "seed", function() { return main_seed; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "simulationParameters", function() { return simulationParameters; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maxAggregateRadius", function() { return maxAggregateRadius; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "drawColor", function() { return drawColor; });\n\n\n\n\n\n\nvar defaultDrift = 0.5;\nvar defaultStickProbability = 1;\nvar main_seedSize = 3;\nvar drawColor = \'rgba(255, 0, 0, 255)\';\nvar canvas;\nvar context;\nvar canvasSize = new Point(0, 0);\nvar main_seed = new Point(0, 0);\nvar maxAggregateRadius;\nvar simulationParameters = {\n  isParamsChanged: false,\n  stickProbability: defaultStickProbability,\n  verticalDrift: defaultDrift,\n  horizontalDrift: defaultDrift\n};\n\ndocument.addEventListener("DOMContentLoaded", init);\n\nfunction init() {\n  canvas = document.getElementById("canvas");\n  canvasSize.x = canvas.width;\n  canvasSize.y = canvas.height;\n  main_seed.x = Math.floor(canvasSize.x / 2);\n  main_seed.y = Math.floor(canvasSize.y / 2);\n  context = canvas.getContext("2d");\n  context.fillStyle = drawColor;\n  context.font = "15px Arial";\n  resetCanvas(context, canvas, main_seed, main_seedSize, main_seedSize); // context.clearRect(0, 0, canvasSize.x, canvasSize.y);\n  //context.arc(canvasSize.x / 2, canvasSize.y / 2, 3, 0, 2 * Math.PI);\n  // context.fill();\n\n  writeStatus(context, "Status: Cleared. Hit start to begin new simulation.");\n  maxAggregateRadius = Math.floor(Math.sqrt(canvasSize.x * canvasSize.x + canvasSize.y * canvasSize.y));\n  initRandNum();\n  addHandlers();\n}\n\nfunction addHandlers() {\n  var handlers = [];\n  handlers.push({\n    id: "driftVertical",\n    type: "input",\n    fun: setDriftVertical\n  });\n  handlers.push({\n    id: "driftVertical",\n    type: "dblclick",\n    fun: resetDriftVertical\n  });\n  handlers.push({\n    id: "driftHorizontal",\n    type: "input",\n    fun: setDriftHorizontal\n  });\n  handlers.push({\n    id: "driftHorizontal",\n    type: "dblclick",\n    fun: resetDriftHorizontal\n  });\n  handlers.push({\n    id: "aggregationProbability",\n    type: "input",\n    fun: setAggregationProbability\n  });\n  handlers.push({\n    id: "btn-start",\n    type: "click",\n    fun: start\n  });\n  handlers.push({\n    id: "btn-pause",\n    type: "click",\n    fun: pause\n  });\n  handlers.push({\n    id: "btn-clear",\n    type: "click",\n    fun: stopAndClearCanvas\n  });\n  handlers.forEach(function (handle) {\n    document.getElementById(handle.id).addEventListener(handle.type, handle.fun);\n  });\n}\n\nfunction setAggregationProbability() {\n  var slider = document.getElementById("aggregationProbability");\n  var output = document.getElementById("aggregationProbabilityValue");\n  output.innerHTML = slider.value;\n  simulationParameters.stickProbability = slider.value;\n  simulationParameters.isParamsChanged = true;\n}\n\nfunction setDriftHorizontal() {\n  var slider = document.getElementById("driftHorizontal");\n  var output = document.getElementById("driftHorizontalValue");\n  output.innerHTML = slider.value;\n  simulationParameters.horizontalDrift = slider.value;\n  simulationParameters.isParamsChanged = true;\n}\n\nfunction setDriftVertical() {\n  var slider = document.getElementById("driftVertical");\n  var output = document.getElementById("driftVerticalValue");\n  output.innerHTML = slider.value;\n  simulationParameters.verticalDrift = slider.value;\n  simulationParameters.isParamsChanged = true;\n}\n\nfunction resetDriftVertical() {\n  var slider = document.getElementById("driftVertical");\n  var output = document.getElementById("driftVerticalValue");\n  output.innerHTML = defaultDrift;\n  simulationParameters.verticalDrift = defaultDrift;\n  simulationParameters.isParamsChanged = true;\n  slider.value = defaultDrift;\n}\n\nfunction resetDriftHorizontal() {\n  var slider = document.getElementById("driftHorizontal");\n  var output = document.getElementById("driftHorizontalValue");\n  output.innerHTML = defaultDrift;\n  simulationParameters.verticalDrift = defaultDrift;\n  simulationParameters.isParamsChanged = true;\n  slider.value = defaultDrift;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY2FudmFzQ29tbW9uLmpzPzM4NmIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VuZ2luZS5qcz84ZmRiIiwid2VicGFjazovLy8uL3NyYy9jb21tb25DbGFzc2VzLmpzP2Q0NTAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JhbmQuanM/YWE2ZCIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5qcz81NmQ3Il0sIm5hbWVzIjpbIndyaXRlU3RhdHVzIiwiY3R4IiwidGV4dCIsImNsZWFyUmVjdCIsImZpbGxUZXh0IiwicmVzZXRDYW52YXMiLCJjb250ZXh0IiwiY2FudmFzIiwic2VlZCIsInNlZWRTaXplIiwid2lkdGgiLCJoZWlnaHQiLCJmaWxsU3R5bGUiLCJhcmMiLCJ4IiwieSIsIk1hdGgiLCJQSSIsImZpbGwiLCJpc1N0b3AiLCJjZHQiLCJjb3JlV29ya2VyIiwic3RhdHVzIiwiaXNJbml0IiwiV29ya2VyIiwib25tZXNzYWdlIiwiZSIsInBhcnRMaXN0IiwiSlNPTiIsInBhcnNlIiwiZGF0YSIsInBhcnQiLCJpIiwibGVuZ3RoIiwiZHJhd1BpeGVsIiwibWFpbiIsInVwZGF0ZUNhbnZhcyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpbm5lckhUTUwiLCJhZ2dyZWdhdGVkUGFydGljbGVzQ291bnQiLCJjdXJyZW50TWF4UmFkaXVzIiwiZmQiLCJ1bmRlZmluZWQiLCJyb3VuZCIsInRvU3RyaW5nIiwiaXNQYXJhbXNDaGFuZ2VkIiwicG9zdE1lc3NhZ2UiLCJzdGFydCIsImdldEltYWdlRGF0YSIsInN0b3BBbmRDbGVhckNhbnZhcyIsImNhbnZhc0NvbW1vbiIsInBhdXNlIiwicG9pbnQiLCJjYW52YXNEYXRhIiwiY2FudmFzU2l6ZSIsImluZGV4IiwicHV0SW1hZ2VEYXRhIiwiUG9pbnQiLCJwdCIsImEiLCJiIiwiZHgiLCJkeSIsImZsb29yIiwic3FydCIsImRpc3RhbmNlU3F1YXJlIiwicmFuZEJ1ZmZlclNpemUiLCJjdXJyZW50UmFuZCIsInJhbmROdW0iLCJBcnJheSIsInVuaXRKdW1wIiwiaW5pdFJhbmROdW0iLCJyYW5kb20iLCJnZXRSYW5kVW5pZm9ybUJvb2wiLCJnZXRSYW5kVW5pZm9ybVJhZGlhbiIsImdldFJhbmRVbmlmb3JtQ2lyY3VsYXJQb3NpdGlvbiIsInJhZGl1cyIsInJhbmRSYWRpYW4iLCJjb3MiLCJzaW4iLCJnZXRIb3Jpem9udGFsUmFuZEp1bXAiLCJob3Jpem9udGFsRHJpZnQiLCJnZXRWZXJ0aWNhbFJhbmRKdW1wIiwidmVydGljYWxEcmlmdCIsImdldFJhbmRKdW1wIiwianVtcCIsImRlZmF1bHREcmlmdCIsImRlZmF1bHRTdGlja1Byb2JhYmlsaXR5IiwiZHJhd0NvbG9yIiwibWF4QWdncmVnYXRlUmFkaXVzIiwic2ltdWxhdGlvblBhcmFtZXRlcnMiLCJzdGlja1Byb2JhYmlsaXR5IiwiYWRkRXZlbnRMaXN0ZW5lciIsImluaXQiLCJnZXRDb250ZXh0IiwiZm9udCIsInJhbmQiLCJhZGRIYW5kbGVycyIsImhhbmRsZXJzIiwicHVzaCIsImlkIiwidHlwZSIsImZ1biIsInNldERyaWZ0VmVydGljYWwiLCJyZXNldERyaWZ0VmVydGljYWwiLCJzZXREcmlmdEhvcml6b250YWwiLCJyZXNldERyaWZ0SG9yaXpvbnRhbCIsInNldEFnZ3JlZ2F0aW9uUHJvYmFiaWxpdHkiLCJlbmdpbmUiLCJmb3JFYWNoIiwiaGFuZGxlIiwic2xpZGVyIiwib3V0cHV0IiwidmFsdWUiXSwibWFwcGluZ3MiOiI7OztBQUNBOztBQUVBLFNBQVNBLFdBQVQsQ0FBcUJDLEdBQXJCLEVBQTBCQyxJQUExQixFQUErQjtBQUMzQkQsS0FBRyxDQUFDRSxTQUFKLENBQWMsQ0FBZCxFQUFpQixHQUFqQixFQUFzQixHQUF0QixFQUEyQixFQUEzQjtBQUNBRixLQUFHLENBQUNHLFFBQUosQ0FBYUYsSUFBYixFQUFtQixFQUFuQixFQUF1QixHQUF2QjtBQUNIOztBQUVELFNBQVNHLFdBQVQsQ0FBcUJDLE9BQXJCLEVBQThCQyxNQUE5QixF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M0UsUUFBUSxDQUFDQyxjQUFULENBQXdCLGVBQXhCLENBQWI7QUFDQSxNQUFJMkUsTUFBTSxHQUFHNUUsUUFBUSxDQUFDQyxjQUFULENBQXdCLG9CQUF4QixDQUFiO0FBQ0EyRSxRQUFNLENBQUMxRSxTQUFQLEdBQW1CZ0QsWUFBbkI7QUFDQUksc0JBQW9CLENBQUNQLGFBQXJCLEdBQXFDRyxZQUFyQztBQUNBSSxzQkFBb0IsQ0FBQzdDLGVBQXJCLEdBQXVDLElBQXZDO0FBQ0FrRSxRQUFNLENBQUNFLEtBQVAsR0FBZTNCLFlBQWY7QUFDSDs7QUFFRCxTQUFTb0Isb0JBQVQsR0FBZ0M7QUFDNUIsTUFBSUssTUFBTSxHQUFHM0UsUUFBUSxDQUFDQyxjQUFULENBQXdCLGlCQUF4QixDQUFiO0FBQ0EsTUFBSTJFLE1BQU0sR0FBRzVFLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixzQkFBeEIsQ0FBYjtBQUNBMkUsUUFBTSxDQUFDMUUsU0FBUCxHQUFtQmdELFlBQW5CO0FBQ0FJLHNCQUFvQixDQUFDUCxhQUFyQixHQUFxQ0csWUFBckM7QUFDQUksc0JBQW9CLENBQUM3QyxlQUFyQixHQUF1QyxJQUF2QztBQUNBa0UsUUFBTSxDQUFDRSxLQUFQLEdBQWUzQixZQUFmO0FBQ0giLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5leHBvcnQge3dyaXRlU3RhdHVzLCByZXNldENhbnZhc31cclxuXHJcbmZ1bmN0aW9uIHdyaXRlU3RhdHVzKGN0eCwgdGV4dCl7XHJcbiAgICBjdHguY2xlYXJSZWN0KDAsIDc2MCwgNDAwLCAzMCk7XHJcbiAgICBjdHguZmlsbFRleHQodGV4dCwgMTAsIDc4MCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlc2V0Q2FudmFzKGNvbnRleHQsIGNhbnZhcywgc2VlZCwgc2VlZFNpemUpe1xyXG4gICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJ3JnYmEoMjU1LCAwLCAwLCAyNTUpJztcclxuICAgIGNvbnRleHQuYXJjKHNlZWQueCwgc2VlZC55LCBzZWVkU2l6ZSwgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgY29udGV4dC5maWxsKCk7XHJcbn0iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7Y2FudmFzfSBmcm9tIFwiLi9tYWluXCI7XG5cbmV4cG9ydCB7c3RhcnQsIHBhdXNlLCBzdG9wQW5kQ2xlYXJDYW52YXN9O1xuaW1wb3J0ICogYXMgbWFpbiBmcm9tICcuL21haW4nO1xuaW1wb3J0ICogYXMgY2FudmFzQ29tbW9uIGZyb20gJy4vY2FudmFzQ29tbW9uJ1xuaW1wb3J0IFdvcmtlciBmcm9tICd3b3JrZXItbG9hZGVyIS4vY29yZS5qcydcblxuY29uc3Qgc2VlZFNpemUgPSAyO1xuXG5cbmxldCBpc1N0b3AgPSBmYWxzZTtcbmxldCBjZHQ7XG5sZXQgY29yZVdvcmtlcjtcbmxldCBzdGF0dXM7XG5cbmxldCBpc0luaXQgPSBmYWxzZTtcbmNvcmVXb3JrZXIgPSBuZXcgV29ya2VyKCk7XG5cbmNvcmVXb3JrZXIub25tZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoaXNTdG9wKSByZXR1cm47XG4gICAgbGV0IHBhcnRMaXN0ID0gSlNPTi5wYXJzZShlLmRhdGEucGFydCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0TGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBkcmF3UGl4ZWwocGFydExpc3RbaV0sIGNkdCwgbWFpbi5jYW52YXNTaXplKVxuXG4gICAgfVxuICAgIHVwZGF0ZUNhbnZhcyhtYWluLmNvbnRleHQsIGNkdCk7XG4gICAgLy8gY29uc29sZS5sb2coZS5kYXRhLmFnZ3JlZ2F0ZWRQYXJ0aWNsZXNDb3VudCk7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwdHNcIikuaW5uZXJIVE1MID0gZS5kYXRhLmFnZ3JlZ2F0ZWRQYXJ0aWNsZXNDb3VudDtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNpemVcIikuaW5uZXJIVE1MID0gZS5kYXRhLmN1cnJlbnRNYXhSYWRpdXM7XG4gICAgaWYgKGUuZGF0YS5mZCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZkaW1cIikuaW5uZXJIVE1MID0gKE1hdGgucm91bmQoZS5kYXRhLmZkICogMTAwMCkgLyAxMDAwKS50b1N0cmluZygpO1xuICAgIGlmICghaXNTdG9wKSB7XG4gICAgICAgIGlmIChtYWluLnNpbXVsYXRpb25QYXJhbWV0ZXJzLmlzUGFyYW1zQ2hhbmdlZCkge1xuICAgICAgICAgICAgY29yZVdvcmtlci5wb3N0TWVzc2FnZShbJ3BhcmFtc1VwZGF0ZScsIG1haW4uc2ltdWxhdGlvblBhcmFtZXRlcnNdKTtcbiAgICAgICAgICAgIG1haW4uc2ltdWxhdGlvblBhcmFtZXRlcnMuaXNQYXJhbXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29yZVdvcmtlci5wb3N0TWVzc2FnZSgnY29udGludWUnKTtcbiAgICB9XG59O1xuXG5mdW5jdGlvbiBzdGFydCgpIHtcbiAgICBpZiAoIWlzSW5pdCkge1xuICAgICAgICBjZHQgPSBtYWluLmNvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIG1haW4uY2FudmFzU2l6ZS54LCBtYWluLmNhbnZhc1NpemUueSk7XG4gICAgICAgIGNvcmVXb3JrZXIucG9zdE1lc3NhZ2UoJ2luaXQnKTtcbiAgICAgICAgaWYgKG1haW4uc2ltdWxhdGlvblBhcmFtZXRlcnMuaXNQYXJhbXNDaGFuZ2VkKSB7XG4gICAgICAgICAgICBjb3JlV29ya2VyLnBvc3RNZXNzYWdlKFsncGFyYW1zVXBkYXRlJywgbWFpbi5zaW11bGF0aW9uUGFyYW1ldGVyc10pO1xuICAgICAgICAgICAgbWFpbi5zaW11bGF0aW9uUGFyYW1ldGVycy5pc1BhcmFtc0NoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpc0luaXQgPSB0cnVlO1xuICAgIH1cbiAgICBpc1N0b3AgPSBmYWxzZTtcblxuICAgIGNvcmVXb3JrZXIucG9zdE1lc3NhZ2UoJ3N0YXJ0Jyk7XG4gICAgc3RhdHVzID0gXCJTdGF0dXM6IFN0YXJ0ZWQuIFNpbXVsYXRpb24gb24gdGhlIHJ1bi5cIjtcbn1cblxuZnVuY3Rpb24gc3RvcEFuZENsZWFyQ2FudmFzKCkge1xuICAgIGNvcmVXb3JrZXIucG9zdE1lc3NhZ2UoJ3N0b3AnKTtcbiAgICBpc1N0b3AgPSB0cnVlO1xuICAgIG1haW4uY29udGV4dC5jbGVhclJlY3QoMCwgMCwgbWFpbi5jYW52YXMud2lkdGgsIG1haW4uY2FudmFzLmhlaWdodCk7XG4gICAgc3RhdHVzID0gXCJTdGF0dXM6IENsZWFyZWQuIEhpdCBzdGFydCB0byBiZWdpbiBuZXcgc2ltdWxhdGlvbi5cIlxuICAgIGNhbnZhc0NvbW1vbi53cml0ZVN0YXR1cyhtYWluLmNvbnRleHQsIHN0YXR1cyk7XG4gICAgbWFpbi5jb250ZXh0LmZpbGxTdHlsZSA9ICdyZ2JhKDI1NSwgMCwgMCwgMjU1KSc7XG4gICAgbWFpbi5jb250ZXh0LmFyYyhtYWluLnNlZWQueCwgbWFpbi5zZWVkLnksIHNlZWRTaXplLCAwLCAyICogTWF0aC5QSSk7XG4gICAgbWFpbi5jb250ZXh0LmZpbGwoKTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInB0c1wiKS5pbm5lckhUTUwgPSAnMCc7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzaXplXCIpLmlubmVySFRNTCA9ICcwJztcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZkaW1cIikuaW5uZXJIVE1MID0gXCItXCI7XG4gICAgY2R0ID0gbWFpbi5jb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCBtYWluLmNhbnZhc1NpemUueCwgbWFpbi5jYW52YXNTaXplLnkpO1xuXG59XG5cbmZ1bmN0aW9uIHBhdXNlKCkge1xuICAgIGNvcmVXb3JrZXIucG9zdE1lc3NhZ2UoJ3BhdXNlJyk7XG4gICAgaXNTdG9wID0gdHJ1ZTtcbiAgICBzdGF0dXMgPSBcIlN0YXR1czogUGF1c2VkLiBIaXQgc3RhcnQgdG8gY29udGludWUgc2ltdWxhdGlvbi5cIjtcbiAgICBjYW52YXNDb21tb24ud3JpdGVTdGF0dXMobWFpbi5jb250ZXh0LHN0YXR1cyk7XG59XG5cbmZ1bmN0aW9uIGRyYXdQaXhlbChwb2ludCwgY2FudmFzRGF0YSwgY2FudmFzU2l6ZSkge1xuICAgIGxldCBpbmRleCA9IChwb2ludC54ICsgcG9pbnQueSAqIGNhbnZhc1NpemUueCkgKiA0O1xuICAgIGNhbnZhc0RhdGEuZGF0YVtpbmRleCArIDBdID0gMjU1O1xuICAgIGNhbnZhc0RhdGEuZGF0YVtpbmRleCArIDNdID0gMjU1O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVDYW52YXMoY3R4LCBjYW52YXNEYXRhKSB7XG4gICAgY3R4LnB1dEltYWdlRGF0YShjYW52YXNEYXRhLCAwLCAwKTtcbiAgICBjYW52YXNDb21tb24ud3JpdGVTdGF0dXMoY3R4LHN0YXR1cyk7XG59XG5cblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQge1BvaW50fTtcblxuY2xhc3MgUG9pbnQge1xuICAgIGNvbnN0cnVjdG9yKHgsIHkpIHtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICB9XG5cbiAgICBhZGQocHQpIHtcbiAgICAgICAgdGhpcy54ICs9IHB0Lng7XG4gICAgICAgIHRoaXMueSArPSBwdC55O1xuICAgIH1cblxuICAgIGFkZFBhaXIoeCwgeSkge1xuICAgICAgICB0aGlzLnggKz0geDtcbiAgICAgICAgdGhpcy55ICs9IHk7XG4gICAgfVxuXG4gICAgc3VicyhwdCkge1xuICAgICAgICB0aGlzLnggLT0gcHQueDtcbiAgICAgICAgdGhpcy55IC09IHB0Lnk7XG4gICAgfVxuXG4gICAgY29weShwdCkge1xuICAgICAgICB0aGlzLnggPSBwdC54O1xuICAgICAgICB0aGlzLnkgPSBwdC55O1xuICAgIH1cblxuICAgIGNvcHlQYWlyKHgsIHkpIHtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICB9XG5cbiAgICBzdW0oYSwgYikge1xuICAgICAgICB0aGlzLnggPSBhLnggKyBiLng7XG4gICAgICAgIHRoaXMueSA9IGEueSArIGIueTtcbiAgICB9XG5cbiAgICBkaXN0YW5jZVNxdWFyZShwdCkge1xuICAgICAgICBsZXQgZHggPSB0aGlzLnggLSBwdC54O1xuICAgICAgICBsZXQgZHkgPSB0aGlzLnkgLSBwdC55O1xuICAgICAgICByZXR1cm4gKGR4ICogZHggKyBkeSAqIGR5KTtcbiAgICB9XG5cbiAgICBkaXN0YW5jZShwdCkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnNxcnQodGhpcy5kaXN0YW5jZVNxdWFyZShwdCkpKTtcbiAgICB9XG5cbn0iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCB7aW5pdFJhbmROdW0sIGdldFJhbmRVbmlmb3JtQm9vbCwgZ2V0UmFuZEp1bXAsIGdldFJhbmRVbmlmb3JtQ2lyY3VsYXJQb3NpdGlvbn1cbmltcG9ydCB7UG9pbnR9IGZyb20gJy4vY29tbW9uQ2xhc3Nlcyc7XG5cbmNvbnN0IHJhbmRCdWZmZXJTaXplID0gMTAwMDAwO1xubGV0IGN1cnJlbnRSYW5kID0gMDtcbmxldCByYW5kTnVtID0gQXJyYXkocmFuZEJ1ZmZlclNpemUpO1xuY29uc3QgdW5pdEp1bXAgPSAxO1xuXG5mdW5jdGlvbiBpbml0UmFuZE51bSgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmRCdWZmZXJTaXplOyBpKyspIHtcbiAgICAgICAgcmFuZE51bVtpXSA9IE1hdGgucmFuZG9tKCk7XG4gICAgfVxuXG59XG5cbmZ1bmN0aW9uIGdldFJhbmRVbmlmb3JtQm9vbCgpIHtcbiAgICBpZiAoY3VycmVudFJhbmQgPiByYW5kQnVmZmVyU2l6ZSAtIDEpXG4gICAgICAgIGN1cnJlbnRSYW5kID0gLTE7XG5cbiAgICBjdXJyZW50UmFuZCsrO1xuICAgIHJldHVybiByYW5kTnVtW2N1cnJlbnRSYW5kXTtcbn1cblxuZnVuY3Rpb24gZ2V0UmFuZFVuaWZvcm1SYWRpYW4oKSB7XG4gICAgcmV0dXJuIGdldFJhbmRVbmlmb3JtQm9vbCgpICogTWF0aC5QSSAqIDIuMDtcbn1cblxuZnVuY3Rpb24gZ2V0UmFuZFVuaWZvcm1DaXJjdWxhclBvc2l0aW9uKHJhZGl1cywgc2VlZCkge1xuICAgIGxldCByYW5kUmFkaWFuID0gZ2V0UmFuZFVuaWZvcm1SYWRpYW4oKTtcbiAgICByZXR1cm4gbmV3IFBvaW50KE1hdGguZmxvb3IocmFkaXVzICogTWF0aC5jb3MocmFuZFJhZGlhbikpICsgc2VlZC54LCBNYXRoLmZsb29yKHJhZGl1cyAqIE1hdGguc2luKHJhbmRSYWRpYW4pKSArIHNlZWQueSk7XG59XG5cblxuZnVuY3Rpb24gZ2V0SG9yaXpvbnRhbFJhbmRKdW1wKGhvcml6b250YWxEcmlmdCkge1xuICAgIGlmIChnZXRSYW5kVW5pZm9ybUJvb2woKSA+IGhvcml6b250YWxEcmlmdCkgcmV0dXJuIHVuaXRKdW1wO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIC11bml0SnVtcDtcbn1cblxuZnVuY3Rpb24gZ2V0VmVydGljYWxSYW5kSnVtcCh2ZXJ0aWNhbERyaWZ0KSB7XG4gICAgaWYgKGdldFJhbmRVbmlmb3JtQm9vbCgpID4gdmVydGljYWxEcmlmdCkgcmV0dXJuIHVuaXRKdW1wO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIC11bml0SnVtcDtcbn1cblxuZnVuY3Rpb24gZ2V0UmFuZEp1bXAoaG9yaXpvbnRhbERyaWZ0LCB2ZXJ0aWNhbERyaWZ0KSB7XG4gICAgbGV0IGp1bXAgPSBuZXcgUG9pbnQoMCwgMCk7XG5cbiAgICBpZiAoZ2V0UmFuZFVuaWZvcm1Cb29sKCkgPCAwLjUpIHtcbiAgICAgICAganVtcC54ID0gZ2V0SG9yaXpvbnRhbFJhbmRKdW1wKGhvcml6b250YWxEcmlmdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAganVtcC55ID0gZ2V0VmVydGljYWxSYW5kSnVtcCh2ZXJ0aWNhbERyaWZ0KTtcbiAgICB9XG4gICAgcmV0dXJuIGp1bXA7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgKiBhcyBlbmdpbmUgZnJvbSAnLi9lbmdpbmUnO1xuaW1wb3J0ICogYXMgcmFuZCBmcm9tICcuL3JhbmQnO1xuaW1wb3J0ICogYXMgY2FudmFzQ29tbW9uIGZyb20gJy4vY2FudmFzQ29tbW9uJ1xuaW1wb3J0IHtQb2ludH0gZnJvbSAnLi9jb21tb25DbGFzc2VzJztcblxuXG5jb25zdCBkZWZhdWx0RHJpZnQgPSAwLjU7XG5jb25zdCBkZWZhdWx0U3RpY2tQcm9iYWJpbGl0eSA9IDE7XG5jb25zdCBzZWVkU2l6ZSA9IDM7XG5jb25zdCBkcmF3Q29sb3IgPSAncmdiYSgyNTUsIDAsIDAsIDI1NSknO1xuXG5sZXQgY2FudmFzO1xubGV0IGNvbnRleHQ7XG5sZXQgY2FudmFzU2l6ZSA9IG5ldyBQb2ludCgwLCAwKTtcbmxldCBzZWVkID0gbmV3IFBvaW50KDAsIDApO1xubGV0IG1heEFnZ3JlZ2F0ZVJhZGl1cztcblxuXG5sZXQgc2ltdWxhdGlvblBhcmFtZXRlcnMgPSB7XG4gICAgaXNQYXJhbXNDaGFuZ2VkOiBmYWxzZSxcbiAgICBzdGlja1Byb2JhYmlsaXR5OiBkZWZhdWx0U3RpY2tQcm9iYWJpbGl0eSxcbiAgICB2ZXJ0aWNhbERyaWZ0OiBkZWZhdWx0RHJpZnQsXG4gICAgaG9yaXpvbnRhbERyaWZ0OiBkZWZhdWx0RHJpZnRcbn07XG5cbmV4cG9ydCB7Y29udGV4dCwgY2FudmFzLCBjYW52YXNTaXplLCBzZWVkLCBzaW11bGF0aW9uUGFyYW1ldGVycywgbWF4QWdncmVnYXRlUmFkaXVzLCBkcmF3Q29sb3J9O1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBpbml0KTtcblxuZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcbiAgICBjYW52YXNTaXplLnggPSBjYW52YXMud2lkdGg7XG4gICAgY2FudmFzU2l6ZS55ID0gY2FudmFzLmhlaWdodDtcbiAgICBzZWVkLnggPSBNYXRoLmZsb29yKGNhbnZhc1NpemUueCAvIDIpO1xuICAgIHNlZWQueSA9IE1hdGguZmxvb3IoY2FudmFzU2l6ZS55IC8gMik7XG5cbiAgICBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGRyYXdDb2xvcjtcbiAgICBjb250ZXh0LmZvbnQgPSBcIjE1cHggQXJpYWxcIjtcblxuICAgIGNhbnZhc0NvbW1vbi5yZXNldENhbnZhcyhjb250ZXh0LCBjYW52YXMsIHNlZWQsIHNlZWRTaXplLCBzZWVkU2l6ZSk7XG5cbiAgIC8vIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIGNhbnZhc1NpemUueCwgY2FudmFzU2l6ZS55KTtcbiAgICAvL2NvbnRleHQuYXJjKGNhbnZhc1NpemUueCAvIDIsIGNhbnZhc1NpemUueSAvIDIsIDMsIDAsIDIgKiBNYXRoLlBJKTtcbiAgIC8vIGNvbnRleHQuZmlsbCgpO1xuXG4gICAgY2FudmFzQ29tbW9uLndyaXRlU3RhdHVzKGNvbnRleHQsXCJTdGF0dXM6IENsZWFyZWQuIEhpdCBzdGFydCB0byBiZWdpbiBuZXcgc2ltdWxhdGlvbi5cIik7XG4gICAgbWF4QWdncmVnYXRlUmFkaXVzID0gTWF0aC5mbG9vcihNYXRoLnNxcnQoY2FudmFzU2l6ZS54ICogY2FudmFzU2l6ZS54ICsgY2FudmFzU2l6ZS55ICogY2FudmFzU2l6ZS55KSk7XG4gICAgcmFuZC5pbml0UmFuZE51bSgpO1xuICAgIGFkZEhhbmRsZXJzKCk7XG5cbn1cblxuZnVuY3Rpb24gYWRkSGFuZGxlcnMoKSB7XG5cbiAgICBsZXQgaGFuZGxlcnMgPSBbXTtcblxuICAgIGhhbmRsZXJzLnB1c2goe2lkOiBcImRyaWZ0VmVydGljYWxcIiwgdHlwZTogXCJpbnB1dFwiLCBmdW46IHNldERyaWZ0VmVydGljYWx9KTtcbiAgICBoYW5kbGVycy5wdXNoKHtpZDogXCJkcmlmdFZlcnRpY2FsXCIsIHR5cGU6IFwiZGJsY2xpY2tcIiwgZnVuOiByZXNldERyaWZ0VmVydGljYWx9KTtcbiAgICBoYW5kbGVycy5wdXNoKHtpZDogXCJkcmlmdEhvcml6b250YWxcIiwgdHlwZTogXCJpbnB1dFwiLCBmdW46IHNldERyaWZ0SG9yaXpvbnRhbH0pO1xuICAgIGhhbmRsZXJzLnB1c2goe2lkOiBcImRyaWZ0SG9yaXpvbnRhbFwiLCB0eXBlOiBcImRibGNsaWNrXCIsIGZ1bjogcmVzZXREcmlmdEhvcml6b250YWx9KTtcbiAgICBoYW5kbGVycy5wdXNoKHtpZDogXCJhZ2dyZWdhdGlvblByb2JhYmlsaXR5XCIsIHR5cGU6IFwiaW5wdXRcIiwgZnVuOiBzZXRBZ2dyZWdhdGlvblByb2JhYmlsaXR5fSk7XG4gICAgaGFuZGxlcnMucHVzaCh7aWQ6IFwiYnRuLXN0YXJ0XCIsIHR5cGU6IFwiY2xpY2tcIiwgZnVuOiBlbmdpbmUuc3RhcnR9KTtcbiAgICBoYW5kbGVycy5wdXNoKHtpZDogXCJidG4tcGF1c2VcIiwgdHlwZTogXCJjbGlja1wiLCBmdW46IGVuZ2luZS5wYXVzZX0pO1xuICAgIGhhbmRsZXJzLnB1c2goe2lkOiBcImJ0bi1jbGVhclwiLCB0eXBlOiBcImNsaWNrXCIsIGZ1bjogZW5naW5lLnN0b3BBbmRDbGVhckNhbnZhc30pO1xuXG4gICAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGUpe1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChoYW5kbGUuaWQpLmFkZEV2ZW50TGlzdGVuZXIoaGFuZGxlLnR5cGUsIGhhbmRsZS5mdW4pO1xuICAgIH0pO1xufVxuXG5cbmZ1bmN0aW9uIHNldEFnZ3JlZ2F0aW9uUHJvYmFiaWxpdHkoKSB7XG4gICAgbGV0IHNsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWdncmVnYXRpb25Qcm9iYWJpbGl0eVwiKTtcbiAgICBsZXQgb3V0cHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhZ2dyZWdhdGlvblByb2JhYmlsaXR5VmFsdWVcIik7XG4gICAgb3V0cHV0LmlubmVySFRNTCA9IHNsaWRlci52YWx1ZTtcbiAgICBzaW11bGF0aW9uUGFyYW1ldGVycy5zdGlja1Byb2JhYmlsaXR5ID0gc2xpZGVyLnZhbHVlO1xuICAgIHNpbXVsYXRpb25QYXJhbWV0ZXJzLmlzUGFyYW1zQ2hhbmdlZCA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIHNldERyaWZ0SG9yaXpvbnRhbCgpIHtcbiAgICBsZXQgc2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkcmlmdEhvcml6b250YWxcIik7XG4gICAgbGV0IG91dHB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZHJpZnRIb3Jpem9udGFsVmFsdWVcIik7XG4gICAgb3V0cHV0LmlubmVySFRNTCA9IHNsaWRlci52YWx1ZTtcbiAgICBzaW11bGF0aW9uUGFyYW1ldGVycy5ob3Jpem9udGFsRHJpZnQgPSBzbGlkZXIudmFsdWU7XG4gICAgc2ltdWxhdGlvblBhcmFtZXRlcnMuaXNQYXJhbXNDaGFuZ2VkID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gc2V0RHJpZnRWZXJ0aWNhbCgpIHtcbiAgICBsZXQgc2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkcmlmdFZlcnRpY2FsXCIpO1xuICAgIGxldCBvdXRwdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRyaWZ0VmVydGljYWxWYWx1ZVwiKTtcbiAgICBvdXRwdXQuaW5uZXJIVE1MID0gc2xpZGVyLnZhbHVlO1xuICAgIHNpbXVsYXRpb25QYXJhbWV0ZXJzLnZlcnRpY2FsRHJpZnQgPSBzbGlkZXIudmFsdWU7XG4gICAgc2ltdWxhdGlvblBhcmFtZXRlcnMuaXNQYXJhbXNDaGFuZ2VkID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmVzZXREcmlmdFZlcnRpY2FsKCkge1xuICAgIGxldCBzbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRyaWZ0VmVydGljYWxcIik7XG4gICAgbGV0IG91dHB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZHJpZnRWZXJ0aWNhbFZhbHVlXCIpO1xuICAgIG91dHB1dC5pbm5lckhUTUwgPSBkZWZhdWx0RHJpZnQ7XG4gICAgc2ltdWxhdGlvblBhcmFtZXRlcnMudmVydGljYWxEcmlmdCA9IGRlZmF1bHREcmlmdDtcbiAgICBzaW11bGF0aW9uUGFyYW1ldGVycy5pc1BhcmFtc0NoYW5nZWQgPSB0cnVlO1xuICAgIHNsaWRlci52YWx1ZSA9IGRlZmF1bHREcmlmdDtcbn1cblxuZnVuY3Rpb24gcmVzZXREcmlmdEhvcml6b250YWwoKSB7XG4gICAgbGV0IHNsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZHJpZnRIb3Jpem9udGFsXCIpO1xuICAgIGxldCBvdXRwdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRyaWZ0SG9yaXpvbnRhbFZhbHVlXCIpO1xuICAgIG91dHB1dC5pbm5lckhUTUwgPSBkZWZhdWx0RHJpZnQ7XG4gICAgc2ltdWxhdGlvblBhcmFtZXRlcnMudmVydGljYWxEcmlmdCA9IGRlZmF1bHREcmlmdDtcbiAgICBzaW11bGF0aW9uUGFyYW1ldGVycy5pc1BhcmFtc0NoYW5nZWQgPSB0cnVlO1xuICAgIHNsaWRlci52YWx1ZSA9IGRlZmF1bHREcmlmdDtcbn1cblxuXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n')}]);