!function(Q){var F={};function B(U){if(F[U])return F[U].exports;var n=F[U]={i:U,l:!1,exports:{}};return Q[U].call(n.exports,n,n.exports,B),n.l=!0,n.exports}B.m=Q,B.c=F,B.d=function(Q,F,U){B.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:U})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,F){if(1&F&&(Q=B(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(B.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var n in Q)B.d(U,n,function(F){return Q[F]}.bind(null,n));return U},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="",B(B.s=0)}([function(Q,F,B){Q.exports=B(1)},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/utils.js\n\'mode strict\';\n\n\nvar verbose = false;\n\nfunction logger(str) {\n  if (verbose) console.log(str);\n}\n// CONCATENATED MODULE: ./src/rand.js\n\n\n\n\nvar randBufferSize = 100000;\nvar currentRand = 0;\nvar randNum = Array(randBufferSize);\nvar unitJump = 1;\n\nfunction initRandNum() {\n  for (var i = 0; i < randBufferSize; i++) {\n    randNum[i] = Math.random();\n  }\n\n  logger(\'Init rand num is finished!\');\n}\n\nfunction getRandUniformBool() {\n  if (currentRand > randBufferSize - 1) currentRand = -1;\n  currentRand++;\n  return randNum[currentRand];\n}\n\nfunction getRandUniformRadian() {\n  //utils.logger(\'Run now: getRandRadian\');\n  return getRandUniformBool() * Math.PI * 2.0;\n}\n\nfunction getRandUniformCircularPosition(radius, centerX, centerY) {\n  //utils.logger(\'Run now: getCircularPositionX\');\n  var randRadian = getRandUniformRadian();\n  return {\n    posX: Math.floor(radius * Math.cos(randRadian)) + centerX,\n    posY: Math.floor(radius * Math.sin(randRadian)) + centerY\n  };\n}\n\nfunction getHorizontalRandJump(horizontalDrift) {\n  logger(\'Run now: getHorizontalRandJump\');\n  var prob = getRandUniformBool(); //utils.logger(\'HORIZONTAl: prob:\' + prob + \' horDrift:\' + horizontalDrift);\n\n  if (prob > horizontalDrift) return unitJump;else return -unitJump;\n}\n\nfunction getVerticalRandJump(verticalDrift) {\n  //utils.logger(\'Run now: getVerticalRandJump\');\n  var prob = getRandUniformBool(); //utils.logger(\'Vertical: prob:\' + prob + \' verDrift:\' + verticalDrift);\n\n  if (prob > verticalDrift) return unitJump;else return -unitJump;\n}\n\nfunction getRandJump(horizontalDrift, verticalDrift) {\n  //utils.logger(\'Run now: getRandJump\');\n  var xJump = 0;\n  var yJump = 0;\n\n  if (getRandUniformBool() < 0.5) {\n    xJump = getHorizontalRandJump(horizontalDrift);\n  } else {\n    yJump = getVerticalRandJump(verticalDrift);\n  }\n\n  var jumps = {\n    xJump: xJump,\n    yJump: yJump\n  };\n  return jumps;\n}\n// CONCATENATED MODULE: ./src/fractalDim.js\n\n\n\n\nfunction fractalDim(seedX, seedY, maxR, canvasData, isAggregate) {\n  //utils.logger(\'Run now: fractalDim\');\n  if (maxR < 15) return 0; //utils.logger(maxR);\n\n  var minR = 5;\n  maxR = Math.floor(maxR / 2);\n  var aggregateSize = [];\n  var aggregateMass = [];\n\n  for (var rad = minR; rad <= maxR; rad++) {\n    var ilecz = 0;\n\n    for (var i = seedX - rad; i <= seedX + rad; i++) {\n      for (var j = seedY - rad; j <= seedY + rad; j++) {\n        var squaredDistFromCenter = (i - seedX) * (i - seedX) + (j - seedY) * (j - seedY);\n        if (squaredDistFromCenter <= rad * rad && isAggregate(i, j, canvasData)) ilecz++;\n      }\n    }\n\n    aggregateSize.push(Math.log10(rad));\n    aggregateMass.push(Math.log10(ilecz));\n  }\n\n  var ans = linearRegression(aggregateMass, aggregateSize);\n  document.getElementById("fdim").innerHTML = Math.round(ans.slope * 1000) / 1000; //utils.logger(ans.slope, ans.r2);\n}\n\nvar linearRegression = function linearRegression(y, x) {\n  //utils.logger(\'Run now: linearRegression\');\n  var lr = {};\n  var n = y.length;\n  var sum_x = 0;\n  var sum_y = 0;\n  var sum_xy = 0;\n  var sum_xx = 0;\n  var sum_yy = 0;\n\n  for (var i = 0; i < y.length; i++) {\n    sum_x += x[i];\n    sum_y += y[i];\n    sum_xy += x[i] * y[i];\n    sum_xx += x[i] * x[i];\n    sum_yy += y[i] * y[i];\n  }\n\n  lr[\'slope\'] = (n * sum_xy - sum_x * sum_y) / (n * sum_xx - sum_x * sum_x);\n  lr[\'intercept\'] = (sum_y - lr.slope * sum_x) / n;\n  lr[\'r2\'] = Math.pow((n * sum_xy - sum_x * sum_y) / Math.sqrt((n * sum_xx - sum_x * sum_x) * (n * sum_yy - sum_y * sum_y)), 2);\n  return lr;\n};\n// CONCATENATED MODULE: ./src/engine.js\n\n\n\n\n\n\n\nvar seedSize = 2;\nvar insertMargin = 10;\nvar aggregatedCountPerFrame = 50;\nvar domainMargin = 12;\nvar maxAggregateRadius = maxInscribedCircleRadius(canvasWidth, canvasHeight);\nvar aggregatedCount = 0;\nvar currentMaxRadius = 0;\nvar isStop = false;\n\nfunction start() {\n  logger(\'Run now: start\');\n  isStop = false;\n  draw();\n}\n\nfunction stopAndClearCanvas() {\n  logger(\'Run now: clearCanvas\');\n  isStop = true;\n  context.clearRect(0, 0, canvas.width, canvas.height);\n  context.fillStyle = \'rgba(255, 0, 0, 255)\';\n  context.arc(seedX, seedY, seedSize, 0, 2 * Math.PI);\n  context.fill();\n  aggregatedCount = 0;\n  currentMaxRadius = 0;\n  document.getElementById("pts").innerHTML = aggregatedCount;\n  document.getElementById("size").innerHTML = currentMaxRadius;\n  document.getElementById("fdim").innerHTML = "-";\n  main_canvasData = context.getImageData(0, 0, canvasWidth, canvasHeight);\n}\n\nfunction pause() {\n  logger(\'Run now: pause\');\n  isStop = true;\n}\n\nfunction draw() {\n  logger(\'Run now: draw\');\n\n  for (var i = 0; i < aggregatedCountPerFrame; i++) {\n    var randCircularPosition = getRandUniformCircularPosition(currentMaxRadius + insertMargin, seedX, seedY);\n    var xStart = randCircularPosition.posX;\n    var yStart = randCircularPosition.posY;\n    var newX = 0;\n    var newY = 0;\n    var isNotAggregated = true;\n\n    while (isNotAggregated) {\n      //dopoki nie zagreguje\n      if (currentMaxRadius > maxAggregateRadius) return;\n      var jumps = getRandJump(main_horizontalDrift, verticalDrift);\n      newX = xStart + jumps.xJump;\n      newY = yStart + jumps.yJump; //utils.logger(\'from draw:\' + newX, newY, maxRadius + domainMargin, isValid(newX, newY, maxRadius + domainMargin));\n\n      if (!isJumpWithinDomain(newX, newY, currentMaxRadius + domainMargin)) {\n        //jezeli chce wyskoczyć poza obszar to stoj w miejscu\n        newX = xStart;\n        newY = yStart;\n      } else {\n        if (isAggregate(newX, newY, main_canvasData)) {\n          //jeżęli chce wskoczyć tam gdzie juz jest czastka\n          if (isGetAggregated()) {\n            //jezeli ma sie przykleic\n            drawPixel(xStart, yStart, 255, 0, 0, 255, main_canvasData);\n            var currentAggregatedRadius = coordinatedToRadius(xStart - seedX, yStart - seedY); //let tempmax = Math.floor(Math.sqrt((xStart - main.seedX) * (xStart - main.seedX) + (yStart - main.seedY) * (yStart - main.seedY)));\n            //utils.logger(newX, newY, maxRadius);\n\n            if (currentAggregatedRadius > currentMaxRadius) {\n              currentMaxRadius = currentAggregatedRadius; //utils.logger(newX, newY, maxRadius);\n            }\n\n            aggregatedCount++; // if (counter === 500)\n            //     diagnostic(main.canvasData);\n\n            isNotAggregated = false;\n          } else //chce skoczyc na agregat ale nei chce sie przykleic to stoj w miejscu\n            {\n              newX = xStart;\n              newY = yStart;\n            }\n        } else {\n          //nie ma agrgatu i nie chce wyskoczyć poza obszar\n          xStart = newX;\n          yStart = newY;\n        }\n      }\n    }\n  }\n\n  if (!isStop) {\n    //utils.logger(\'Updatig canvas!\')\n    updateCanvas(context, main_canvasData);\n    fractalDim(seedX, seedY, currentMaxRadius, main_canvasData, isAggregate);\n    document.getElementById("pts").innerHTML = aggregatedCount;\n    document.getElementById("size").innerHTML = currentMaxRadius;\n    window.requestAnimationFrame(draw);\n  }\n}\n\nfunction isJumpWithinDomain(x, y, maxR) {\n  //utils.logger(\'Run now: isvalid\');\n  var relativeX = x - seedX;\n  var relativeY = y - seedY; //utils.logger(\'fromisvalid\' +\'x:\' + xx + \' y:\' + yy + \' maxR:\' + maxR + \' isValid:\'+  isValidd);\n\n  return coordinatedToRadius(relativeX, relativeY) <= maxR;\n}\n\nfunction isAggregate(x, y, canvasData) {\n  //utils.logger(\'Run now: isAggregate\');\n  var index = (x + y * canvasWidth) * 4;\n  return canvasData.data[index] === 255;\n}\n\nfunction isGetAggregated() {\n  //utils.logger(\'Run now: shouldStick\');\n  return getRandUniformBool() < stickProbability;\n}\n\nfunction drawPixel(x, y, r, g, b, a, canvasData) {\n  //utils.logger(\'Run now: drawPixel\');\n  var index = (x + y * canvasWidth) * 4;\n  canvasData.data[index + 0] = r;\n  canvasData.data[index + 1] = g;\n  canvasData.data[index + 2] = b;\n  canvasData.data[index + 3] = a;\n}\n\nfunction updateCanvas(ctx, canvasData) {\n  //utils.logger(\'Run now: updateCanvas\');\n  ctx.putImageData(canvasData, 0, 0);\n}\n\nfunction maxInscribedCircleRadius(x, y) {\n  var minDim = Math.min(x, y);\n  return coordinatedToRadius(minDim);\n}\n\nfunction coordinatedToRadius(x, y) {\n  return Math.floor(Math.sqrt(x * x + y * y));\n}\n// CONCATENATED MODULE: ./src/commonClasses.js\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\n\n\nvar Point = function Point(x, y) {\n  _classCallCheck(this, Point);\n\n  this.x = x;\n  this.y = y;\n};\n// CONCATENATED MODULE: ./src/main.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "context", function() { return context; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "canvas", function() { return canvas; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "canvasWidth", function() { return canvasWidth; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "canvasHeight", function() { return canvasHeight; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "canvasData", function() { return main_canvasData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "seedX", function() { return seedX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "seedY", function() { return seedY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "horizontalDrift", function() { return main_horizontalDrift; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verticalDrift", function() { return verticalDrift; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stickProbability", function() { return stickProbability; });\n\n\nvar canvas;\nvar main_canvasData;\nvar context;\nvar canvasWidth;\nvar canvasHeight;\nvar seedX;\nvar seedY;\nvar defaultDrift = 0.5;\nvar defaultStickProbability = 1;\nvar stickProbability = defaultStickProbability;\nvar verticalDrift = defaultDrift;\nvar main_horizontalDrift = defaultDrift;\n\n\n\n\n\ndocument.addEventListener("DOMContentLoaded", init);\n\nfunction init() {\n  logger(\'Run now: init\');\n  canvas = document.getElementById("canvas");\n  canvasWidth = canvas.width;\n  canvasHeight = canvas.height;\n  seedX = Math.floor(canvasWidth / 2);\n  seedY = Math.floor(canvasHeight / 2);\n  context = canvas.getContext("2d");\n  context.fillStyle = \'rgba(255, 0, 0, 255)\';\n  context.clearRect(0, 0, canvas.width, canvas.height);\n  context.arc(canvasWidth / 2, canvasHeight / 2, 3, 0, 2 * Math.PI);\n  context.fill();\n  main_canvasData = context.getImageData(0, 0, canvasWidth, canvasHeight);\n  initRandNum();\n  var punkt = new Point(1, 1);\n  console.log(punkt);\n  addHandlers();\n}\n\nfunction addHandlers() {\n  document.getElementById("driftVertical").addEventListener("input", setDriftVertical);\n  document.getElementById("driftVertical").addEventListener("dblclick", resetDriftVertical);\n  document.getElementById("driftHorizontal").addEventListener("input", setDriftHorizontal);\n  document.getElementById("driftHorizontal").addEventListener("dblclick", resetDriftHorizontal);\n  document.getElementById("aggregationProbability").addEventListener("input", setAggregationProbability);\n  document.getElementById("btn-start").addEventListener("click", start);\n  document.getElementById("btn-pause").addEventListener("click", pause);\n  document.getElementById("btn-clear").addEventListener("click", stopAndClearCanvas);\n}\n\nfunction setAggregationProbability() {\n  //utils.logger(\'Run now: setAggregationProbability\');\n  var slider = document.getElementById("aggregationProbability");\n  var output = document.getElementById("aggregationProbabilityValue");\n  output.innerHTML = slider.value;\n  stickProbability = slider.value;\n}\n\nfunction setDriftHorizontal() {\n  //utils.logger(\'Run now: setDriftHorizontal\');\n  var slider = document.getElementById("driftHorizontal");\n  var output = document.getElementById("driftHorizontalValue");\n  output.innerHTML = slider.value;\n  main_horizontalDrift = slider.value;\n}\n\nfunction setDriftVertical() {\n  //utils.logger(\'Run now: setDriftVertical\');\n  var slider = document.getElementById("driftVertical");\n  var output = document.getElementById("driftVerticalValue");\n  output.innerHTML = slider.value;\n  verticalDrift = slider.value;\n}\n\nfunction resetDriftVertical() {\n  //utils.logger(\'Run now: resetDriftVertical\');\n  var slider = document.getElementById("driftVertical");\n  var output = document.getElementById("driftVerticalValue");\n  output.innerHTML = defaultDrift;\n  verticalDrift = defaultDrift;\n  slider.value = defaultDrift;\n}\n\nfunction resetDriftHorizontal() {\n  //utils.logger(\'Run now: resetDriftHorizontal\');\n  var slider = document.getElementById("driftHorizontal");\n  var output = document.getElementById("driftHorizontalValue");\n  output.innerHTML = defaultDrift;\n  verticalDrift = defaultDrift;\n  slider.value = defaultDrift;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')}]);