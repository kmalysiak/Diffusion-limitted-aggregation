!function(Q){var F={};function B(U){if(F[U])return F[U].exports;var n=F[U]={i:U,l:!1,exports:{}};return Q[U].call(n.exports,n,n.exports,B),n.l=!0,n.exports}B.m=Q,B.c=F,B.d=function(Q,F,U){B.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:U})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,F){if(1&F&&(Q=B(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(B.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var n in Q)B.d(U,n,function(F){return Q[F]}.bind(null,n));return U},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="",B(B.s=0)}([function(Q,F,B){Q.exports=B(1)},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/commonClasses.js\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar Point =\n/*#__PURE__*/\nfunction () {\n  function Point(x, y) {\n    _classCallCheck(this, Point);\n\n    this.x = x;\n    this.y = y;\n  }\n\n  _createClass(Point, [{\n    key: "add",\n    value: function add(pt) {\n      this.x += pt.x;\n      this.y += pt.y;\n    }\n  }, {\n    key: "addPair",\n    value: function addPair(x, y) {\n      this.x += x;\n      this.y += y;\n    }\n  }, {\n    key: "subs",\n    value: function subs(pt) {\n      this.x -= pt.x;\n      this.y -= pt.y;\n    }\n  }, {\n    key: "copy",\n    value: function copy(pt) {\n      this.x = pt.x;\n      this.y = pt.y;\n    }\n  }, {\n    key: "copyPair",\n    value: function copyPair(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n  }, {\n    key: "sum",\n    value: function sum(a, b) {\n      this.x = a.x + b.x;\n      this.y = a.y + b.y;\n    }\n  }, {\n    key: "distance",\n    value: function distance(pt) {\n      var dx = this.x - pt.x;\n      var dy = this.y - pt.y;\n      return Math.floor(Math.sqrt(dx * dx + dy * dy));\n    }\n  }]);\n\n  return Point;\n}();\n// CONCATENATED MODULE: ./src/rand.js\n\n\n\n\nvar randBufferSize = 100000;\nvar currentRand = 0;\nvar randNum = Array(randBufferSize);\nvar unitJump = 1;\n\nfunction initRandNum() {\n  for (var i = 0; i < randBufferSize; i++) {\n    randNum[i] = Math.random();\n  }\n}\n\nfunction getRandUniformBool() {\n  if (currentRand > randBufferSize - 1) currentRand = -1;\n  currentRand++;\n  return randNum[currentRand];\n}\n\nfunction getRandUniformRadian() {\n  return getRandUniformBool() * Math.PI * 2.0;\n}\n\nfunction getRandUniformCircularPosition(radius, seed) {\n  var randRadian = getRandUniformRadian();\n  return new Point(Math.floor(radius * Math.cos(randRadian)) + seed.x, Math.floor(radius * Math.sin(randRadian)) + seed.y);\n}\n\nfunction getHorizontalRandJump(horizontalDrift) {\n  if (getRandUniformBool() > horizontalDrift) return unitJump;else return -unitJump;\n}\n\nfunction getVerticalRandJump(verticalDrift) {\n  if (getRandUniformBool() > verticalDrift) return unitJump;else return -unitJump;\n}\n\nfunction getRandJump(horizontalDrift, verticalDrift) {\n  var jump = new Point(0, 0);\n\n  if (getRandUniformBool() < 0.5) {\n    jump.x = getHorizontalRandJump(horizontalDrift);\n  } else {\n    jump.y = getVerticalRandJump(verticalDrift);\n  }\n\n  return jump;\n}\n// CONCATENATED MODULE: ./src/fractalDim.js\n\n\nvar mass = new Array(800).fill(0);\n\nvar isR2Calculation = false;\n\nfunction fractalDim2(newParticleDist, maxR) {\n  for (var i = 0; i < newParticleDist.length; i++) {\n    mass[newParticleDist[i]]++;\n  }\n\n  var logSize = [];\n  var logMass = [];\n  var counter = 0;\n  var totalMass = 0;\n\n  for (var _i = 1; _i < maxR; _i++) {\n    if (mass[_i] > 0) {\n      totalMass += mass[_i];\n      logSize[counter] = Math.log(_i);\n      logMass[counter] = Math.log(totalMass);\n      counter++;\n    }\n  }\n\n  var ans = linearRegression(logMass, logSize);\n  document.getElementById("fdim").innerHTML = Math.round(ans.slope * 1000) / 1000;\n}\n\nfunction linearRegression(y, x) {\n  var lr = {};\n  var n = y.length;\n  var sum_x = 0;\n  var sum_y = 0;\n  var sum_xy = 0;\n  var sum_xx = 0;\n  var sum_yy = 0;\n\n  for (var i = 0; i < y.length; i++) {\n    sum_x += x[i];\n    sum_y += y[i];\n    sum_xy += x[i] * y[i];\n    sum_xx += x[i] * x[i];\n    sum_yy += y[i] * y[i];\n  }\n\n  if (isR2Calculation) {\n    lr[\'r2\'] = Math.pow((n * sum_xy - sum_x * sum_y) / Math.sqrt((n * sum_xx - sum_x * sum_x) * (n * sum_yy - sum_y * sum_y)), 2);\n  }\n\n  lr[\'slope\'] = (n * sum_xy - sum_x * sum_y) / (n * sum_xx - sum_x * sum_x);\n  lr[\'intercept\'] = (sum_y - lr.slope * sum_x) / n;\n  return lr;\n}\n// CONCATENATED MODULE: ./src/engine.js\n\n\n\n\n\n\n\nvar seedSize = 2;\nvar insertMargin = 5;\nvar aggregatedCountPerFrame = 50;\nvar domainMargin = 7;\nvar totalAggregatedCount = 0;\nvar currentMaxRadius = 0;\nvar isStop = false;\nvar cdt;\n\nfunction start() {\n  cdt = context.getImageData(0, 0, canvasSize.x, canvasSize.y);\n  isStop = false;\n  draw();\n}\n\nfunction stopAndClearCanvas() {\n  isStop = true;\n  context.clearRect(0, 0, canvas.width, canvas.height);\n  context.fillStyle = \'rgba(255, 0, 0, 255)\';\n  context.arc(main_seed.x, main_seed.y, seedSize, 0, 2 * Math.PI);\n  context.fill();\n  totalAggregatedCount = 0;\n  currentMaxRadius = 0;\n  document.getElementById("pts").innerHTML = totalAggregatedCount;\n  document.getElementById("size").innerHTML = currentMaxRadius;\n  document.getElementById("fdim").innerHTML = "-";\n  cdt = context.getImageData(0, 0, canvasSize.xh, canvasSize.y);\n}\n\nfunction pause() {\n  isStop = true;\n}\n\nfunction draw() {\n  var aggregatedPointRadiuses = [];\n\n  for (var i = 0; i < aggregatedCountPerFrame; i++) {\n    var newPosition = new Point(0, 0);\n    var startPosition = new Point(0, 0);\n    var randCircularPosition = getRandUniformCircularPosition(currentMaxRadius + insertMargin, main_seed);\n    startPosition.copy(randCircularPosition);\n    var isNotAggregated = true;\n\n    while (isNotAggregated) {\n      if (currentMaxRadius > maxAggregateRadius) return;\n      var jump = getRandJump(main_horizontalDrift, main_verticalDrift);\n      newPosition.sum(startPosition, jump);\n\n      if (!isJumpWithinDomain(newPosition, currentMaxRadius + domainMargin, main_seed)) {\n        newPosition.copy(startPosition);\n      } else {\n        if (isAggregate(newPosition, cdt, canvasSize)) {\n          if (isGetAggregated()) {\n            drawPixel(startPosition, 255, 0, 0, 255, cdt, canvasSize);\n            aggregatedPointRadiuses.push(startPosition.distance(main_seed));\n            if (aggregatedPointRadiuses[i] > currentMaxRadius) currentMaxRadius = aggregatedPointRadiuses[i];\n            totalAggregatedCount++;\n            isNotAggregated = false;\n          } else {\n            newPosition.copy(startPosition);\n          }\n        } else {\n          startPosition.copy(newPosition);\n        }\n      }\n    }\n  }\n\n  if (!isStop) {\n    updateCanvas(context, cdt);\n    fractalDim2(aggregatedPointRadiuses, currentMaxRadius);\n    document.getElementById("pts").innerHTML = totalAggregatedCount;\n    document.getElementById("size").innerHTML = currentMaxRadius;\n    window.requestAnimationFrame(draw);\n  }\n}\n\nfunction isJumpWithinDomain(newPosition, maxR, seed) {\n  return newPosition.distance(seed) <= maxR;\n}\n\nfunction isAggregate(position, canvasData, canvasSize) {\n  var index = (position.x + position.y * canvasSize.x) * 4;\n  return canvasData.data[index] === 255;\n}\n\nfunction isGetAggregated() {\n  return getRandUniformBool() < stickProbability;\n}\n\nfunction drawPixel(point, r, g, b, a, canvasData, canvasSize) {\n  var index = (point.x + point.y * canvasSize.x) * 4;\n  canvasData.data[index + 0] = r;\n  canvasData.data[index + 1] = g;\n  canvasData.data[index + 2] = b;\n  canvasData.data[index + 3] = a;\n}\n\nfunction updateCanvas(ctx, canvasData) {\n  ctx.putImageData(canvasData, 0, 0);\n}\n// CONCATENATED MODULE: ./src/main.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "context", function() { return context; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "canvas", function() { return canvas; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "canvasSize", function() { return canvasSize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "seed", function() { return main_seed; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "horizontalDrift", function() { return main_horizontalDrift; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verticalDrift", function() { return main_verticalDrift; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stickProbability", function() { return stickProbability; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maxAggregateRadius", function() { return maxAggregateRadius; });\n\n\nvar defaultDrift = 0.5;\nvar defaultStickProbability = 1;\nvar canvas;\nvar context;\nvar canvasSize = new Point(0, 0);\nvar main_seed = new Point(0, 0);\nvar maxAggregateRadius;\nvar stickProbability = defaultStickProbability;\nvar main_verticalDrift = defaultDrift;\nvar main_horizontalDrift = defaultDrift;\n\n\n\n\ndocument.addEventListener("DOMContentLoaded", init);\n\nfunction init() {\n  canvas = document.getElementById("canvas");\n  canvasSize.x = canvas.width;\n  canvasSize.y = canvas.height;\n  main_seed.x = Math.floor(canvasSize.x / 2);\n  main_seed.y = Math.floor(canvasSize.y / 2);\n  context = canvas.getContext("2d");\n  context.fillStyle = \'rgba(255, 0, 0, 255)\';\n  context.clearRect(0, 0, canvasSize.x, canvasSize.y);\n  context.arc(canvasSize.x / 2, canvasSize.y / 2, 3, 0, 2 * Math.PI);\n  context.fill();\n  maxAggregateRadius = Math.floor(Math.sqrt(canvasSize.x * canvasSize.x + canvasSize.y * canvasSize.y));\n  initRandNum();\n  addHandlers();\n}\n\nfunction addHandlers() {\n  document.getElementById("driftVertical").addEventListener("input", setDriftVertical);\n  document.getElementById("driftVertical").addEventListener("dblclick", resetDriftVertical);\n  document.getElementById("driftHorizontal").addEventListener("input", setDriftHorizontal);\n  document.getElementById("driftHorizontal").addEventListener("dblclick", resetDriftHorizontal);\n  document.getElementById("aggregationProbability").addEventListener("input", setAggregationProbability);\n  document.getElementById("btn-start").addEventListener("click", start);\n  document.getElementById("btn-pause").addEventListener("click", pause);\n  document.getElementById("btn-clear").addEventListener("click", stopAndClearCanvas);\n}\n\nfunction setAggregationProbability() {\n  var slider = document.getElementById("aggregationProbability");\n  var output = document.getElementById("aggregationProbabilityValue");\n  output.innerHTML = slider.value;\n  stickProbability = slider.value;\n}\n\nfunction setDriftHorizontal() {\n  var slider = document.getElementById("driftHorizontal");\n  var output = document.getElementById("driftHorizontalValue");\n  output.innerHTML = slider.value;\n  main_horizontalDrift = slider.value;\n}\n\nfunction setDriftVertical() {\n  var slider = document.getElementById("driftVertical");\n  var output = document.getElementById("driftVerticalValue");\n  output.innerHTML = slider.value;\n  main_verticalDrift = slider.value;\n}\n\nfunction resetDriftVertical() {\n  var slider = document.getElementById("driftVertical");\n  var output = document.getElementById("driftVerticalValue");\n  output.innerHTML = defaultDrift;\n  main_verticalDrift = defaultDrift;\n  slider.value = defaultDrift;\n}\n\nfunction resetDriftHorizontal() {\n  var slider = document.getElementById("driftHorizontal");\n  var output = document.getElementById("driftHorizontalValue");\n  output.innerHTML = defaultDrift;\n  main_verticalDrift = defaultDrift;\n  slider.value = defaultDrift;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uQ2xhc3Nlcy5qcz9kNDUwIiwid2VicGFjazovLy8uL3NyYy9yYW5kLmpzP2FhNmQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYWN0YWxEaW0uanM/Mjk5OCIsIndlYnBhY2s6Ly8vLi9zcmMvZW5naW5lLmpzPzhmZGIiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4uanM/NTZkNyJdLCJuYW1lcyI6WyJQb2ludCIsIngiLCJ5IiwicHQiLCJhIiwiYiIsImR4IiwiZHkiLCJNYXRoIiwiZmxvb3IiLCJzcXJ0IiwicmFuZEJ1ZmZlclNpemUiLCJjdXJyZW50UmFuZCIsInJhbmROdW0iLCJBcnJheSIsInVuaXRKdW1wIiwiaW5pdFJhbmROdW0iLCJpIiwicmFuZG9tIiwiZ2V0UmFuZFVuaWZvcm1Cb29sIiwiZ2V0UmFuZFVuaWZvcm1SYWRpYW4iLCJQSSIsImdldFJhbmRVbmlmb3JtQ2lyY3VsYXJQb3NpdGlvbiIsInJhZGl1cyIsInNlZWQiLCJyYW5kUmFkaWFuIiwiY29zIiwic2luIiwiZ2V0SG9yaXpvbnRhbFJhbmRKdW1wIiwiaG9yaXpvbnRhbERyaWZ0IiwiZ2V0VmVydGljYWxSYW5kSnVtcCIsInZlcnRpY2FsRHJpZnQiLCJnZXRSYW5kSnVtcCIsImp1bXAiLCJtYXNzIiwiZmlsbCIsImlzUjJDYWxjdWxhdGlvbiIsImZyYWN0YWxEaW0yIiwibmV3UGFydGljbGVEaXN0IiwibWF4UiIsImxlbmd0aCIsImxvZ1NpemUiLCJsb2dNYXNzIiwiY291bnRlciIsInRvdGFsTWFzcyIsImxvZyIsImFucyIsImxpbmVhclJlZ3Jlc3Npb24iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJIVE1MIiwicm91bmQiLCJzbG9wZSIsImxyIiwibiIsInN1bV94Iiwic3VtX3kiLCJzdW1feHkiLCJzdW1feHgiLCJzdW1feXkiLCJwb3ciLCJzZWVkU2l6ZSIsImluc2VydE1hcmdpbiIsImFnZ3JlZ2F0ZWRDb3VudFBlckZyYW1lIiwiZG9tYWluTWFyZ2luIiwidG90YWxBZ2dyZWdhdGVkQ291bnQiLCJjdXJyZW50TWF4UmFkaXVzIiwiaXNTdG9wIiwiY2R0Iiwic3RhcnQiLCJtYWluIiwiZ2V0SW1hZ2VEYXRhIiwiZHJhdyIsInN0b3BBbmRDbGVhckNhbnZhcyIsImNsZWFyUmVjdCIsIndpZHRoIiwiaGVpZ2h0IiwiZmlsbFN0eWxlIiwiYXJjIiwieGgiLCJwYXVzZSIsImFnZ3JlZ2F0ZWRQb2ludFJhZGl1c2VzIiwibmV3UG9zaXRpb24iLCJzdGFydFBvc2l0aW9uIiwicmFuZENpcmN1bGFyUG9zaXRpb24iLCJyYW5kIiwiY29weSIsImlzTm90QWdncmVnYXRlZCIsInN1bSIsImlzSnVtcFdpdGhpbkRvbWFpbiIsImlzQWdncmVnYXRlIiwiaXNHZXRBZ2dyZWdhdGVkIiwiZHJhd1BpeGVsIiwicHVzaCIsImRpc3RhbmNlIiwidXBkYXRlQ2FudmFzIiwiZnJhY3RhbERpbSIsIndpbmRvdyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInBvc2l0aW9uIiwiY2FudmFzRGF0YSIsImNhbnZhc1NpemUiLCJpbmRleCIsImRhdGEiLCJwb2ludCIsInIiLCJnIiwiY3R4IiwicHV0SW1hZ2VEYXRhIiwiZGVmYXVsdERyaWZ0IiwiZGVmYXVsdFN0aWNrUHJvYmFiaWxpdHkiLCJjYW52YXMiLCJjb250ZXh0IiwibWF4QWdncmVnYXRlUmFkaXVzIiwic3RpY2tQcm9iYWJpbGl0eSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbml0IiwiZ2V0Q29udGV4dCIsImFkZEhhbmRsZXJzIiwic2V0RHJpZnRWZXJ0aWNhbCIsInJlc2V0RHJpZnRWZXJ0aWNhbCIsInNldERyaWZ0SG9yaXpvbnRhbCIsInJlc2V0RHJpZnRIb3Jpem9udGFsIiwic2V0QWdncmVnYXRpb25Qcm9iYWJpbGl0eSIsImVuZ2luZSIsInNsaWRlciIsIm91dHB1dCIsInZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7QUFBQTs7Ozs7Ozs7QUFFQTs7SUFFTUEsSzs7O0FBQ0YsaUJBQVlDLENB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Q0FBYjtBQUNBLE1BQUk2RSxNQUFNLEdBQUc5RSxRQUFRLENBQUNDLGNBQVQsQ0FBd0Isb0JBQXhCLENBQWI7QUFDQTZFLFFBQU0sQ0FBQzVFLFNBQVAsR0FBbUIyRCxZQUFuQjtBQUNBOUUsb0JBQWEsR0FBRThFLFlBQWY7QUFDQWdCLFFBQU0sQ0FBQ0UsS0FBUCxHQUFlbEIsWUFBZjtBQUNIOztBQUVELFNBQVNhLG9CQUFULEdBQWdDO0FBQzVCLE1BQUlHLE1BQU0sR0FBRzdFLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixpQkFBeEIsQ0FBYjtBQUNBLE1BQUk2RSxNQUFNLEdBQUc5RSxRQUFRLENBQUNDLGNBQVQsQ0FBd0Isc0JBQXhCLENBQWI7QUFDQTZFLFFBQU0sQ0FBQzVFLFNBQVAsR0FBa0IyRCxZQUFsQjtBQUNBOUUsb0JBQWEsR0FBRzhFLFlBQWhCO0FBQ0FnQixRQUFNLENBQUNFLEtBQVAsR0FBZWxCLFlBQWY7QUFDSCIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXHJcblxyXG5leHBvcnQgeyBQb2ludCB9O1xyXG5cclxuY2xhc3MgUG9pbnQge1xyXG4gICAgY29uc3RydWN0b3IoeCwgeSkge1xyXG4gICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgdGhpcy55ID0geTtcclxuICAgIH1cclxuXHJcbiAgICBhZGQocHQpIHtcclxuICAgICAgICB0aGlzLnggKz0gcHQueDtcclxuICAgICAgICB0aGlzLnkgKz0gcHQueTtcclxuICAgIH1cclxuICAgIGFkZFBhaXIoeCwgeSkge1xyXG4gICAgICAgIHRoaXMueCArPSB4O1xyXG4gICAgICAgIHRoaXMueSArPSB5O1xyXG4gICAgfVxyXG5cclxuICAgIHN1YnMocHQpIHtcclxuICAgICAgICB0aGlzLnggLT0gcHQueDtcclxuICAgICAgICB0aGlzLnkgLT0gcHQueTtcclxuICAgIH1cclxuXHJcbiAgICBjb3B5KHB0KSB7XHJcbiAgICAgICAgdGhpcy54ID0gcHQueDtcclxuICAgICAgICB0aGlzLnkgPSBwdC55O1xyXG4gICAgfVxyXG5cclxuICAgIGNvcHlQYWlyKHgsIHkpIHtcclxuICAgICAgICB0aGlzLnggPSB4O1xyXG4gICAgICAgIHRoaXMueSA9IHk7XHJcbiAgICB9XHJcblxyXG4gICAgc3VtKGEsIGIpIHtcclxuICAgICAgICB0aGlzLnggPSBhLnggKyBiLnhcclxuICAgICAgICB0aGlzLnkgPSBhLnkgKyBiLnk7XHJcbiAgICB9XHJcblxyXG4gICAgZGlzdGFuY2UocHQpe1xyXG4gICAgICAgIGxldCBkeCA9IHRoaXMueCAtIHB0Lng7XHJcbiAgICAgICAgbGV0IGR5ID0gdGhpcy55IC0gcHQueTtcclxuICAgICAgICByZXR1cm4gIE1hdGguZmxvb3IoTWF0aC5zcXJ0KGR4KmR4ICsgZHkqZHkpKTtcclxuICAgIH1cclxuXHJcbn0iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0IHsgaW5pdFJhbmROdW0sIGdldFJhbmRVbmlmb3JtQm9vbCwgZ2V0UmFuZEp1bXAsIGdldFJhbmRVbmlmb3JtQ2lyY3VsYXJQb3NpdGlvbiB9XG5pbXBvcnR7UG9pbnR9IGZyb20gJy4vY29tbW9uQ2xhc3Nlcyc7XG5cbmxldCByYW5kQnVmZmVyU2l6ZSA9IDEwMDAwMDtcbmxldCBjdXJyZW50UmFuZCA9IDA7XG5sZXQgcmFuZE51bSA9IEFycmF5KHJhbmRCdWZmZXJTaXplKTtcblxuY29uc3QgdW5pdEp1bXAgPSAxO1xuXG5mdW5jdGlvbiBpbml0UmFuZE51bSgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmRCdWZmZXJTaXplOyBpKyspIHtcbiAgICAgICAgcmFuZE51bVtpXSA9IE1hdGgucmFuZG9tKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRSYW5kVW5pZm9ybUJvb2woKSB7XG4gICAgaWYgKGN1cnJlbnRSYW5kID4gcmFuZEJ1ZmZlclNpemUgLSAxKVxuICAgICAgICBjdXJyZW50UmFuZCA9IC0xO1xuXG4gICAgY3VycmVudFJhbmQrKztcbiAgICByZXR1cm4gcmFuZE51bVtjdXJyZW50UmFuZF07XG59XG5cbmZ1bmN0aW9uIGdldFJhbmRVbmlmb3JtUmFkaWFuKCkge1xuICAgIHJldHVybiAoKGdldFJhbmRVbmlmb3JtQm9vbCgpICogTWF0aC5QSSAqIDIuMCkpO1xufVxuXG5mdW5jdGlvbiBnZXRSYW5kVW5pZm9ybUNpcmN1bGFyUG9zaXRpb24ocmFkaXVzLCBzZWVkKSB7XG4gICAgbGV0IHJhbmRSYWRpYW4gPSBnZXRSYW5kVW5pZm9ybVJhZGlhbigpO1xuICAgIHJldHVybiAgbmV3IFBvaW50KE1hdGguZmxvb3IocmFkaXVzICogTWF0aC5jb3MocmFuZFJhZGlhbikpICsgc2VlZC54LCBNYXRoLmZsb29yKHJhZGl1cyAqIE1hdGguc2luKHJhbmRSYWRpYW4pKSArIHNlZWQueSk7XG59XG5cblxuZnVuY3Rpb24gZ2V0SG9yaXpvbnRhbFJhbmRKdW1wKGhvcml6b250YWxEcmlmdCkge1xuICAgIGlmIChnZXRSYW5kVW5pZm9ybUJvb2woKSA+IGhvcml6b250YWxEcmlmdCkgcmV0dXJuIHVuaXRKdW1wO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIC11bml0SnVtcDtcbn1cblxuZnVuY3Rpb24gZ2V0VmVydGljYWxSYW5kSnVtcCh2ZXJ0aWNhbERyaWZ0KSB7XG4gICAgaWYgKGdldFJhbmRVbmlmb3JtQm9vbCgpID4gdmVydGljYWxEcmlmdCkgcmV0dXJuIHVuaXRKdW1wO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIC11bml0SnVtcDtcbn1cblxuZnVuY3Rpb24gZ2V0UmFuZEp1bXAoaG9yaXpvbnRhbERyaWZ0LCB2ZXJ0aWNhbERyaWZ0KSB7XG4gICAgbGV0IGp1bXAgPSBuZXcgUG9pbnQoMCwwKTtcblxuICAgIGlmIChnZXRSYW5kVW5pZm9ybUJvb2woKSA8IDAuNSkge1xuICAgICAgICBqdW1wLnggPSBnZXRIb3Jpem9udGFsUmFuZEp1bXAoaG9yaXpvbnRhbERyaWZ0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGp1bXAueSA9IGdldFZlcnRpY2FsUmFuZEp1bXAodmVydGljYWxEcmlmdCk7XG4gICAgfVxuICAgIHJldHVybiBqdW1wO1xufSIsIid1c2Ugc3RyaWN0J1xuXG5sZXQgbWFzcyA9IG5ldyBBcnJheSg4MDApLmZpbGwoMCk7XG5cbmV4cG9ydCB7IGZyYWN0YWxEaW0yIH1cblxuY29uc3QgaXNSMkNhbGN1bGF0aW9uID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZyYWN0YWxEaW0yKG5ld1BhcnRpY2xlRGlzdCwgbWF4Uikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3UGFydGljbGVEaXN0Lmxlbmd0aDsgaSsrKVxuICAgICAgICBtYXNzW25ld1BhcnRpY2xlRGlzdFtpXV0rKztcblxuICAgIGxldCBsb2dTaXplID0gW107XG4gICAgbGV0IGxvZ01hc3MgPSBbXTtcbiAgICBsZXQgY291bnRlciA9IDA7XG4gICAgbGV0IHRvdGFsTWFzcyA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBtYXhSOyBpKyspIHtcbiAgICAgICAgaWYgKG1hc3NbaV0gPiAwKSB7XG4gICAgICAgICAgICB0b3RhbE1hc3MgKz0gbWFzc1tpXVxuICAgICAgICAgICAgbG9nU2l6ZVtjb3VudGVyXSA9IE1hdGgubG9nKGkpO1xuICAgICAgICAgICAgbG9nTWFzc1tjb3VudGVyXSA9IE1hdGgubG9nKHRvdGFsTWFzcyk7XG4gICAgICAgICAgICBjb3VudGVyKys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IGFucyA9IGxpbmVhclJlZ3Jlc3Npb24obG9nTWFzcywgbG9nU2l6ZSk7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmZGltXCIpLmlubmVySFRNTCA9IE1hdGgucm91bmQoYW5zLnNsb3BlICogMTAwMCkgLyAxMDAwO1xufVxuXG5mdW5jdGlvbiBsaW5lYXJSZWdyZXNzaW9uKHksIHgpIHtcblxuXG5cbiAgICBsZXQgbHIgPSB7fTtcbiAgICBsZXQgbiA9IHkubGVuZ3RoO1xuICAgIGxldCBzdW1feCA9IDA7XG4gICAgbGV0IHN1bV95ID0gMDtcbiAgICBsZXQgc3VtX3h5ID0gMDtcbiAgICBsZXQgc3VtX3h4ID0gMDtcbiAgICBsZXQgc3VtX3l5ID0gMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgeS5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgIHN1bV94ICs9IHhbaV07XG4gICAgICAgIHN1bV95ICs9IHlbaV07XG5cbiAgICAgICAgc3VtX3h5ICs9ICh4W2ldICogeVtpXSk7XG4gICAgICAgIHN1bV94eCArPSAoeFtpXSAqIHhbaV0pO1xuICAgICAgICBzdW1feXkgKz0gKHlbaV0gKiB5W2ldKTtcbiAgICB9XG4gICAgaWYgKGlzUjJDYWxjdWxhdGlvbikge1xuICAgICAgICBsclsncjInXSA9IE1hdGgucG93KChuICogc3VtX3h5IC0gc3VtX3ggKiBzdW1feSkgLyBNYXRoLnNxcnQoKG4gKiBzdW1feHggLSBzdW1feCAqIHN1bV94KSAqIChuICogc3VtX3l5IC0gc3VtX3kgKiBzdW1feSkpLCAyKTtcbiAgICB9XG4gICAgIGxyWydzbG9wZSddID0gKG4gKiBzdW1feHkgLSBzdW1feCAqIHN1bV95KSAvIChuICogc3VtX3h4IC0gc3VtX3ggKiBzdW1feCk7XG4gICAgbHJbJ2ludGVyY2VwdCddID0gKHN1bV95IC0gbHIuc2xvcGUgKiBzdW1feCkgLyBuO1xuICAgIHJldHVybiBsclxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydCB7IHN0YXJ0LCBwYXVzZSwgc3RvcEFuZENsZWFyQ2FudmFzIH07XG5pbXBvcnQgKiBhcyByYW5kIGZyb20gJy4vcmFuZCc7XG5pbXBvcnQgKiBhcyBtYWluIGZyb20gJy4vbWFpbic7XG5pbXBvcnQgKiBhcyBmcmFjdGFsRGltIGZyb20gJy4vZnJhY3RhbERpbSc7XG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJy4vY29tbW9uQ2xhc3Nlcyc7XG5cbmNvbnN0IHNlZWRTaXplID0gMjtcbmNvbnN0IGluc2VydE1hcmdpbiA9IDU7XG5jb25zdCBhZ2dyZWdhdGVkQ291bnRQZXJGcmFtZSA9IDUwO1xuY29uc3QgZG9tYWluTWFyZ2luID0gNztcblxuXG5sZXQgdG90YWxBZ2dyZWdhdGVkQ291bnQgPSAwO1xubGV0IGN1cnJlbnRNYXhSYWRpdXMgPSAwO1xubGV0IGlzU3RvcCA9IGZhbHNlO1xubGV0IGNkdDtcblxuXG5mdW5jdGlvbiBzdGFydCgpIHtcbiAgICBjZHQgPSBtYWluLmNvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIG1haW4uY2FudmFzU2l6ZS54LCBtYWluLmNhbnZhc1NpemUueSk7XG4gICAgaXNTdG9wID0gZmFsc2U7XG4gICAgZHJhdygpO1xuXG59XG5cbmZ1bmN0aW9uIHN0b3BBbmRDbGVhckNhbnZhcygpIHtcbiAgICBpc1N0b3AgPSB0cnVlO1xuXG4gICAgbWFpbi5jb250ZXh0LmNsZWFyUmVjdCgwLCAwLCBtYWluLmNhbnZhcy53aWR0aCwgbWFpbi5jYW52YXMuaGVpZ2h0KTtcbiAgICBtYWluLmNvbnRleHQuZmlsbFN0eWxlID0gJ3JnYmEoMjU1LCAwLCAwLCAyNTUpJztcbiAgICBtYWluLmNvbnRleHQuYXJjKG1haW4uc2VlZC54LCBtYWluLnNlZWQueSwgc2VlZFNpemUsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICBtYWluLmNvbnRleHQuZmlsbCgpXG4gICAgdG90YWxBZ2dyZWdhdGVkQ291bnQgPSAwO1xuICAgIGN1cnJlbnRNYXhSYWRpdXMgPSAwO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHRzXCIpLmlubmVySFRNTCA9IHRvdGFsQWdncmVnYXRlZENvdW50O1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2l6ZVwiKS5pbm5lckhUTUwgPSBjdXJyZW50TWF4UmFkaXVzO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZmRpbVwiKS5pbm5lckhUTUwgPSBcIi1cIjtcbiAgICBjZHQgPSBtYWluLmNvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsbWFpbi5jYW52YXNTaXplLnhoLCBtYWluLmNhbnZhc1NpemUueSk7XG59XG5cbmZ1bmN0aW9uIHBhdXNlKCkge1xuICAgIGlzU3RvcCA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIGRyYXcoKSB7XG4gICAgbGV0IGFnZ3JlZ2F0ZWRQb2ludFJhZGl1c2VzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhZ2dyZWdhdGVkQ291bnRQZXJGcmFtZTsgaSsrKSB7XG5cbiAgICAgICAgbGV0IG5ld1Bvc2l0aW9uID0gbmV3IFBvaW50KDAsIDApO1xuICAgICAgICBsZXQgc3RhcnRQb3NpdGlvbiA9IG5ldyBQb2ludCgwLCAwKTtcbiAgICAgICAgbGV0IHJhbmRDaXJjdWxhclBvc2l0aW9uID0gcmFuZC5nZXRSYW5kVW5pZm9ybUNpcmN1bGFyUG9zaXRpb24oY3VycmVudE1heFJhZGl1cyArIGluc2VydE1hcmdpbiwgbWFpbi5zZWVkKTtcbiAgICAgICAgc3RhcnRQb3NpdGlvbi5jb3B5KHJhbmRDaXJjdWxhclBvc2l0aW9uKTtcbiAgICAgICAgbGV0IGlzTm90QWdncmVnYXRlZCA9IHRydWU7XG4gICAgICAgIFxuXG4gICAgICAgIHdoaWxlIChpc05vdEFnZ3JlZ2F0ZWQpIHtcblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRNYXhSYWRpdXMgPiBtYWluLm1heEFnZ3JlZ2F0ZVJhZGl1cylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBsZXQganVtcCA9IHJhbmQuZ2V0UmFuZEp1bXAobWFpbi5ob3Jpem9udGFsRHJpZnQsIG1haW4udmVydGljYWxEcmlmdCk7XG4gICAgICAgICAgICBuZXdQb3NpdGlvbi5zdW0oc3RhcnRQb3NpdGlvbiwganVtcClcblxuICAgICAgICAgICAgaWYgKCFpc0p1bXBXaXRoaW5Eb21haW4obmV3UG9zaXRpb24sIGN1cnJlbnRNYXhSYWRpdXMgKyBkb21haW5NYXJnaW4sIG1haW4uc2VlZCkpIHtcbiAgICAgICAgICAgICAgICBuZXdQb3NpdGlvbi5jb3B5KHN0YXJ0UG9zaXRpb24pO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcblxuICAgICAgICAgICAgICAgIGlmIChpc0FnZ3JlZ2F0ZShuZXdQb3NpdGlvbiwgY2R0LCBtYWluLmNhbnZhc1NpemUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0dldEFnZ3JlZ2F0ZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHJhd1BpeGVsKHN0YXJ0UG9zaXRpb24sIDI1NSwgMCwgMCwgMjU1LCBjZHQsIG1haW4uY2FudmFzU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZ2dyZWdhdGVkUG9pbnRSYWRpdXNlcy5wdXNoKHN0YXJ0UG9zaXRpb24uZGlzdGFuY2UobWFpbi5zZWVkKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhZ2dyZWdhdGVkUG9pbnRSYWRpdXNlc1tpXSA+IGN1cnJlbnRNYXhSYWRpdXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE1heFJhZGl1cyA9IGFnZ3JlZ2F0ZWRQb2ludFJhZGl1c2VzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEFnZ3JlZ2F0ZWRDb3VudCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNOb3RBZ2dyZWdhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdQb3NpdGlvbi5jb3B5KHN0YXJ0UG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0UG9zaXRpb24uY29weShuZXdQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghaXNTdG9wKSB7XG4gICAgICAgIHVwZGF0ZUNhbnZhcyhtYWluLmNvbnRleHQsIGNkdCk7XG4gICAgICAgIGZyYWN0YWxEaW0uZnJhY3RhbERpbTIoYWdncmVnYXRlZFBvaW50UmFkaXVzZXMsIGN1cnJlbnRNYXhSYWRpdXMpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInB0c1wiKS5pbm5lckhUTUwgPSB0b3RhbEFnZ3JlZ2F0ZWRDb3VudDtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzaXplXCIpLmlubmVySFRNTCA9IGN1cnJlbnRNYXhSYWRpdXM7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhdyk7XG4gICAgfVxufVxuZnVuY3Rpb24gaXNKdW1wV2l0aGluRG9tYWluKG5ld1Bvc2l0aW9uLCBtYXhSLCBzZWVkKSB7XG4gICAgcmV0dXJuIChuZXdQb3NpdGlvbi5kaXN0YW5jZShzZWVkKSA8PSBtYXhSKTtcbn1cblxuZnVuY3Rpb24gaXNBZ2dyZWdhdGUocG9zaXRpb24sIGNhbnZhc0RhdGEsIGNhbnZhc1NpemUpIHtcbiAgICBsZXQgaW5kZXggPSAocG9zaXRpb24ueCArIHBvc2l0aW9uLnkgKiBjYW52YXNTaXplLngpICogNDtcbiAgICByZXR1cm4gY2FudmFzRGF0YS5kYXRhW2luZGV4XSA9PT0gMjU1O1xufVxuXG5mdW5jdGlvbiBpc0dldEFnZ3JlZ2F0ZWQoKSB7XG4gICAgcmV0dXJuIChyYW5kLmdldFJhbmRVbmlmb3JtQm9vbCgpIDwgbWFpbi5zdGlja1Byb2JhYmlsaXR5KTtcbn1cblxuZnVuY3Rpb24gZHJhd1BpeGVsKHBvaW50LCByLCBnLCBiLCBhLCBjYW52YXNEYXRhLCBjYW52YXNTaXplKSB7XG4gICAgbGV0IGluZGV4ID0gKHBvaW50LnggKyBwb2ludC55ICogY2FudmFzU2l6ZS54KSAqIDQ7XG4gICAgY2FudmFzRGF0YS5kYXRhW2luZGV4ICsgMF0gPSByO1xuICAgIGNhbnZhc0RhdGEuZGF0YVtpbmRleCArIDFdID0gZztcbiAgICBjYW52YXNEYXRhLmRhdGFbaW5kZXggKyAyXSA9IGI7XG4gICAgY2FudmFzRGF0YS5kYXRhW2luZGV4ICsgM10gPSBhO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVDYW52YXMoY3R4LCBjYW52YXNEYXRhKSB7XG4gICAgY3R4LnB1dEltYWdlRGF0YShjYW52YXNEYXRhLCAwLCAwKTtcbn1cblxuIiwiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGRlZmF1bHREcmlmdCA9IDAuNTtcbmNvbnN0IGRlZmF1bHRTdGlja1Byb2JhYmlsaXR5ID0gMTtcblxubGV0IGNhbnZhcztcbmxldCBjb250ZXh0O1xubGV0IGNhbnZhc1NpemUgPSBuZXcgUG9pbnQoMCwwKTtcbmxldCBzZWVkID0gbmV3IFBvaW50KDAsMCk7XG5sZXQgbWF4QWdncmVnYXRlUmFkaXVzO1xubGV0IHN0aWNrUHJvYmFiaWxpdHkgPSBkZWZhdWx0U3RpY2tQcm9iYWJpbGl0eTtcbmxldCB2ZXJ0aWNhbERyaWZ0ID0gZGVmYXVsdERyaWZ0O1xubGV0IGhvcml6b250YWxEcmlmdCA9IGRlZmF1bHREcmlmdDtcblxuXG5pbXBvcnQgKiBhcyBlbmdpbmUgZnJvbSAnLi9lbmdpbmUnO1xuaW1wb3J0ICogYXMgcmFuZCBmcm9tICcuL3JhbmQnO1xuaW1wb3J0IHtQb2ludH0gIGZyb20gJy4vY29tbW9uQ2xhc3Nlcyc7XG5cbmV4cG9ydCB7Y29udGV4dCwgY2FudmFzLCBjYW52YXNTaXplLCBzZWVkLCBob3Jpem9udGFsRHJpZnQsIHZlcnRpY2FsRHJpZnQsIHN0aWNrUHJvYmFiaWxpdHksIG1heEFnZ3JlZ2F0ZVJhZGl1c307XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsaW5pdCk7XG5cbmZ1bmN0aW9uIGluaXQoKSB7ICBcbiAgICBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTsgXG4gICAgY2FudmFzU2l6ZS54ID0gY2FudmFzLndpZHRoO1xuICAgIGNhbnZhc1NpemUueSA9IGNhbnZhcy5oZWlnaHQ7XG4gICAgc2VlZC54ID0gTWF0aC5mbG9vcihjYW52YXNTaXplLnggLyAyKTtcbiAgICBzZWVkLnkgPSBNYXRoLmZsb29yKGNhbnZhc1NpemUueSAvIDIpO1xuICAgIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJ3JnYmEoMjU1LCAwLCAwLCAyNTUpJztcbiAgICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCBjYW52YXNTaXplLngsIGNhbnZhc1NpemUueSk7XG4gICAgY29udGV4dC5hcmMoY2FudmFzU2l6ZS54LzIsIGNhbnZhc1NpemUueS8yLCAzLCAwLCAyICogTWF0aC5QSSk7XG4gICAgY29udGV4dC5maWxsKClcbiAgICBtYXhBZ2dyZWdhdGVSYWRpdXMgPSBNYXRoLmZsb29yKE1hdGguc3FydChjYW52YXNTaXplLngqY2FudmFzU2l6ZS54ICsgY2FudmFzU2l6ZS55KmNhbnZhc1NpemUueSkpO1xuICAgIHJhbmQuaW5pdFJhbmROdW0oKTtcbiAgICBhZGRIYW5kbGVycygpO1xuICAgIFxufVxuXG5mdW5jdGlvbiBhZGRIYW5kbGVycygpe1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZHJpZnRWZXJ0aWNhbFwiKS5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgc2V0RHJpZnRWZXJ0aWNhbCk7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkcmlmdFZlcnRpY2FsXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJkYmxjbGlja1wiLCByZXNldERyaWZ0VmVydGljYWwpO1xuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkcmlmdEhvcml6b250YWxcIikuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIHNldERyaWZ0SG9yaXpvbnRhbCk7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkcmlmdEhvcml6b250YWxcIikuYWRkRXZlbnRMaXN0ZW5lcihcImRibGNsaWNrXCIsIHJlc2V0RHJpZnRIb3Jpem9udGFsKTtcblxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWdncmVnYXRpb25Qcm9iYWJpbGl0eVwiKS5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgc2V0QWdncmVnYXRpb25Qcm9iYWJpbGl0eSk7XG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ0bi1zdGFydFwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZW5naW5lLnN0YXJ0KTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ0bi1wYXVzZVwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZW5naW5lLnBhdXNlKTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ0bi1jbGVhclwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZW5naW5lLnN0b3BBbmRDbGVhckNhbnZhcyk7XG59XG5cblxuZnVuY3Rpb24gc2V0QWdncmVnYXRpb25Qcm9iYWJpbGl0eSgpIHtcbiAgICB2YXIgc2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhZ2dyZWdhdGlvblByb2JhYmlsaXR5XCIpO1xuICAgIHZhciBvdXRwdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFnZ3JlZ2F0aW9uUHJvYmFiaWxpdHlWYWx1ZVwiKTtcbiAgICBvdXRwdXQuaW5uZXJIVE1MID0gc2xpZGVyLnZhbHVlO1xuICAgIHN0aWNrUHJvYmFiaWxpdHkgPSBzbGlkZXIudmFsdWU7XG59XG5cbmZ1bmN0aW9uIHNldERyaWZ0SG9yaXpvbnRhbCgpIHtcbiAgICB2YXIgc2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkcmlmdEhvcml6b250YWxcIik7XG4gICAgdmFyIG91dHB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZHJpZnRIb3Jpem9udGFsVmFsdWVcIik7XG4gICAgb3V0cHV0LmlubmVySFRNTCA9IHNsaWRlci52YWx1ZTtcbiAgICBob3Jpem9udGFsRHJpZnQgPSBzbGlkZXIudmFsdWU7XG59XG5cbmZ1bmN0aW9uIHNldERyaWZ0VmVydGljYWwoKSB7XG4gICAgdmFyIHNsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZHJpZnRWZXJ0aWNhbFwiKTtcbiAgICB2YXIgb3V0cHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkcmlmdFZlcnRpY2FsVmFsdWVcIik7XG4gICAgb3V0cHV0LmlubmVySFRNTCA9IHNsaWRlci52YWx1ZTtcbiAgICB2ZXJ0aWNhbERyaWZ0ID0gc2xpZGVyLnZhbHVlO1xufVxuXG5mdW5jdGlvbiByZXNldERyaWZ0VmVydGljYWwoKSB7XG4gICAgdmFyIHNsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZHJpZnRWZXJ0aWNhbFwiKTtcbiAgICB2YXIgb3V0cHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkcmlmdFZlcnRpY2FsVmFsdWVcIik7XG4gICAgb3V0cHV0LmlubmVySFRNTCA9IGRlZmF1bHREcmlmdDtcbiAgICB2ZXJ0aWNhbERyaWZ0ID1kZWZhdWx0RHJpZnQ7XG4gICAgc2xpZGVyLnZhbHVlID0gZGVmYXVsdERyaWZ0O1xufVxuXG5mdW5jdGlvbiByZXNldERyaWZ0SG9yaXpvbnRhbCgpIHtcbiAgICB2YXIgc2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkcmlmdEhvcml6b250YWxcIik7XG4gICAgdmFyIG91dHB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZHJpZnRIb3Jpem9udGFsVmFsdWVcIik7XG4gICAgb3V0cHV0LmlubmVySFRNTCA9ZGVmYXVsdERyaWZ0O1xuICAgIHZlcnRpY2FsRHJpZnQgPSBkZWZhdWx0RHJpZnQ7XG4gICAgc2xpZGVyLnZhbHVlID0gZGVmYXVsdERyaWZ0O1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n')}]);