!function(Q){var F={};function B(U){if(F[U])return F[U].exports;var n=F[U]={i:U,l:!1,exports:{}};return Q[U].call(n.exports,n,n.exports,B),n.l=!0,n.exports}B.m=Q,B.c=F,B.d=function(Q,F,U){B.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:U})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,F){if(1&F&&(Q=B(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(B.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var n in Q)B.d(U,n,function(F){return Q[F]}.bind(null,n));return U},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="",B(B.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/commonClasses.js\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar Point =\n/*#__PURE__*/\nfunction () {\n  function Point(x, y) {\n    _classCallCheck(this, Point);\n\n    this.x = x;\n    this.y = y;\n  }\n\n  _createClass(Point, [{\n    key: \"add\",\n    value: function add(pt) {\n      this.x += pt.x;\n      this.y += pt.y;\n    }\n  }, {\n    key: \"addPair\",\n    value: function addPair(x, y) {\n      this.x += x;\n      this.y += y;\n    }\n  }, {\n    key: \"subs\",\n    value: function subs(pt) {\n      this.x -= pt.x;\n      this.y -= pt.y;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(pt) {\n      this.x = pt.x;\n      this.y = pt.y;\n    }\n  }, {\n    key: \"copyPair\",\n    value: function copyPair(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n  }, {\n    key: \"sum\",\n    value: function sum(a, b) {\n      this.x = a.x + b.x;\n      this.y = a.y + b.y;\n    }\n  }, {\n    key: \"distanceSquare\",\n    value: function distanceSquare(pt) {\n      var dx = this.x - pt.x;\n      var dy = this.y - pt.y;\n      return dx * dx + dy * dy;\n    }\n  }, {\n    key: \"distance\",\n    value: function distance(pt) {\n      return Math.floor(Math.sqrt(this.distanceSquare(pt)));\n    }\n  }]);\n\n  return Point;\n}();\n// CONCATENATED MODULE: ./src/rand.js\n\n\n\n\nvar randBufferSize = 100000;\nvar currentRand = 0;\nvar randNum = Array(randBufferSize);\nvar unitJump = 1;\n\nfunction initRandNum() {\n  for (var i = 0; i < randBufferSize; i++) {\n    randNum[i] = Math.random();\n  }\n}\n\nfunction getRandUniformBool() {\n  if (currentRand > randBufferSize - 1) currentRand = -1;\n  currentRand++;\n  return randNum[currentRand];\n}\n\nfunction getRandUniformRadian() {\n  return getRandUniformBool() * Math.PI * 2.0;\n}\n\nfunction getRandUniformCircularPosition(radius, seed) {\n  var randRadian = getRandUniformRadian();\n  return new Point(Math.floor(radius * Math.cos(randRadian)) + seed.x, Math.floor(radius * Math.sin(randRadian)) + seed.y);\n}\n\nfunction getHorizontalRandJump(horizontalDrift) {\n  if (getRandUniformBool() > horizontalDrift) return unitJump;else return -unitJump;\n}\n\nfunction getVerticalRandJump(verticalDrift) {\n  if (getRandUniformBool() > verticalDrift) return unitJump;else return -unitJump;\n}\n\nfunction getRandJump(horizontalDrift, verticalDrift) {\n  var jump = new Point(0, 0);\n\n  if (getRandUniformBool() < 0.5) {\n    jump.x = getHorizontalRandJump(horizontalDrift);\n  } else {\n    jump.y = getVerticalRandJump(verticalDrift);\n  }\n\n  return jump;\n}\n// CONCATENATED MODULE: ./src/fractalDim.js\n\n\nvar mass;\n\nvar isR2Calculation = false;\n\nfunction fractalDim2(newParticleDist, maxR, maxSize) {\n  if (mass === undefined) {\n    mass = new Array(maxSize).fill(0);\n  }\n\n  for (var i = 0; i < newParticleDist.length; i++) {\n    mass[newParticleDist[i]]++;\n  }\n\n  var logSize = [];\n  var logMass = [];\n  var counter = 0;\n  var totalMass = 0;\n\n  for (var _i = 1; _i < maxR; _i++) {\n    if (mass[_i] > 0) {\n      totalMass += mass[_i];\n      logSize[counter] = Math.log(_i);\n      logMass[counter] = Math.log(totalMass);\n      counter++;\n    }\n  }\n\n  return linearRegression(logMass, logSize).slope;\n}\n\nfunction linearRegression(y, x) {\n  var lr = {};\n  var n = y.length;\n  var sum_x = 0;\n  var sum_y = 0;\n  var sum_xy = 0;\n  var sum_xx = 0;\n  var sum_yy = 0;\n\n  for (var i = 0; i < y.length; i++) {\n    sum_x += x[i];\n    sum_y += y[i];\n    sum_xy += x[i] * y[i];\n    sum_xx += x[i] * x[i];\n    sum_yy += y[i] * y[i];\n  }\n\n  if (isR2Calculation) {\n    lr['r2'] = Math.pow((n * sum_xy - sum_x * sum_y) / Math.sqrt((n * sum_xx - sum_x * sum_x) * (n * sum_yy - sum_y * sum_y)), 2);\n  }\n\n  lr['slope'] = (n * sum_xy - sum_x * sum_y) / (n * sum_xx - sum_x * sum_x);\n  lr['intercept'] = (sum_y - lr.slope * sum_x) / n;\n  return lr;\n}\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./src/core.js\n\n\n // import * as main from './main';\n\nvar currentMaxRadius = 0;\nvar insertMargin = 3;\nvar domainMargin = 5;\nvar maxStepsForParticle = 100000;\nvar maxAggregateRadiusAllowed = 400;\nvar isStop = false;\nvar bigTable;\nvar core_seed = new Point(400, 400);\nvar core_horizontalDrift = 0.5;\nvar core_verticalDrift = 0.5;\nvar stickProbability = 1;\nvar core_canvasSize = new Point(800, 800);\n\nonmessage = function onmessage(msg) {\n  // eslint-disable-next-line no-console\n  //console.log('received command:' + msg.data);\n  if (msg.data == 'init') runInit();\n\n  if (msg.data == 'start') {\n    isStop = false;\n    runSimulation();\n  }\n\n  if (msg.data == 'stop') {\n    isStop = true;\n  }\n\n  if (msg.data == 'continue' && !isStop) runSimulation();\n\n  if (Array.isArray(msg.data)) {\n    if (msg.data[0] == 'paramsUpdate') {\n      core_verticalDrift = msg.data[1].verticalDrift;\n      core_horizontalDrift = msg.data[1].horizontalDrift;\n      stickProbability = msg.data[1].stickProbability;\n      console.log(core_verticalDrift, core_horizontalDrift, stickProbability);\n    }\n  }\n};\n\nfunction runInit() {\n  initRandNum();\n  console.log('I am alive!!');\n  var canvasSize = new Point(800, 800);\n  bigTable = new Array(800 * 800).fill(0); // console.log(rand.getRandUniformCircularPosition(10, new Point(400, 400)));\n\n  drawPixel(new Point(400, 400), canvasSize);\n  drawPixel(new Point(401, 401), canvasSize);\n  drawPixel(new Point(400, 401), canvasSize);\n  drawPixel(new Point(401, 400), canvasSize);\n}\n\nvar aggregatedParticlesCount = 0;\nvar aggregatedPointRadiuses = [];\nvar aggregatedParticlesList = [];\nvar particlesPerMessage = 1;\n\nfunction runSimulation() {\n  //maxAggregateRadius = Math.floor(Math.min(canvasSize.x, canvasSize.y) / 2);\n  if (core()) aggregatedParticlesCount++;\n\n  if (aggregatedParticlesCount % particlesPerMessage === 0) {\n    var fd = fractalDim2(aggregatedPointRadiuses, currentMaxRadius, maxAggregateRadiusAllowed);\n    postMessage({\n      part: JSON.stringify(aggregatedParticlesList),\n      fd: fd,\n      aggregatedParticlesCount: aggregatedParticlesCount,\n      currentMaxRadius: currentMaxRadius\n    });\n    aggregatedParticlesList.length = 0;\n  } else if (!isStop) {\n    if (aggregatedParticlesCount % particlesPerMessage === 0) setTimeout(runSimulation, 0);else runSimulation();\n  }\n}\n\nfunction core() {\n  //  console.log('core on the run for particle:' + aggregatedParticlesCount);\n  var isNotAggregated = true;\n  var newPosition = new Point(0, 0);\n  var startPosition = new Point(0, 0);\n  var randCircularPosition = getRandUniformCircularPosition(currentMaxRadius + insertMargin, core_seed);\n  startPosition.copy(randCircularPosition);\n\n  for (var doneSteps = 0; doneSteps < maxStepsForParticle; doneSteps++) {\n    if (!isNotAggregated) return;\n\n    if (currentMaxRadius >= maxAggregateRadiusAllowed) {\n      isStop = true;\n      return;\n    }\n\n    if (currentMaxRadius > maxAggregateRadiusAllowed) return;\n    var jump = getRandJump(core_horizontalDrift, core_verticalDrift);\n    newPosition.sum(startPosition, jump);\n\n    if (!isJumpWithinDomain(newPosition, currentMaxRadius + domainMargin, core_seed)) {\n      newPosition.copy(startPosition);\n    } else {\n      if (isAggregate(newPosition, core_canvasSize)) {\n        if (isGetAggregated()) {\n          drawPixel(startPosition, core_canvasSize);\n          aggregatedPointRadiuses.push(startPosition.distance(core_seed));\n          aggregatedParticlesList.push(newPosition); // console.log(newPosition, aggregatedParticlesCount,  aggregatedPointRadiuses, currentMaxRadius);\n\n          if (aggregatedPointRadiuses[aggregatedParticlesCount] > currentMaxRadius) currentMaxRadius = aggregatedPointRadiuses[aggregatedParticlesCount];\n          isNotAggregated = false;\n          return true;\n        }\n      } else {\n        startPosition.copy(newPosition);\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction isJumpWithinDomain(newPosition, maxR, seed) {\n  return newPosition.distanceSquare(seed) <= maxR * maxR;\n}\n\nfunction isAggregate(position, canvasSize) {\n  var index = position.x + position.y * canvasSize.x;\n  return bigTable[index] === 1;\n}\n\nfunction isGetAggregated() {\n  return getRandUniformBool() < stickProbability;\n}\n\nfunction drawPixel(point, canvasSize) {\n  var index = point.x + point.y * canvasSize.x;\n  bigTable[index] = 1;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);